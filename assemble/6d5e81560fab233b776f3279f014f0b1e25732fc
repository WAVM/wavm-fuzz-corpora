(func()i8x16.max_s)(func(i8x16.max_s)(ax_)iŸŸŸŸŸŸŸŸŸŸŸ1s)(func(i8x16.max_s)i64.rem_s(i8x16.max_s)()i¿1s)(func(i8x16.max_s)iŸŸŸ1s)(func(i8x16.max_s)i64.rem_s(i8x16.max_s)(8xma16.max_x_)i¿2s)(func(i8x16.max_s)i64.rem_s(i8x16.max_s)((module
  (type $0 (func (param i32) (result f32)))
  (type $1 (func (param i32) (result f64)))
  (type $2 (func (param i32 i32) (result i32)))
  (type $3 (func (param i32 i32) (result i64)))
  (export "f32_align_switch" (func $5))
  (export "f64_align_switch" (func $6))
  (export "i32_align_switch" (func $7))
  (export "i64_align_switch" (func $8))
  (memory $4  1)
  
  (func $5 (type $0)
    (param $0 i32)
    (result f32)
    (local $1 f32)
    (local $2 f32)
    f32.const 0x1.44
        end ;; $1
        i32.const 0
        local.get $1
        f32.store align=2
        i32.const 0
        f32.load align=2
        local.set $2
        br $4
      end ;; $2
      i32.const 0
      local.get $1
      f32.store
      i32.const 0
 KKKKKKKKKK     f32.load
      local.set $2
    end ;; $4
    local.get $2
    )
  
  (func $6 (type $1)
    (param $0 i32)
    (result f64)
    (local $1 f64)
    (local $2 f64)
    f64.const 0x1.4000000000000p+3
    local.set $1
    block end ;; $8
    local.get $2
    )
  
  (func $7 (type $2)
    (param $0 i32)
    (param $1 i32)
    (result i32)
    (local $2 i32)
    (local $3 i32)
    i32.const 10
    local.set $2
    block $32
      block $16u
        block $16s
          block $8u
            block $8s
              block $0
                local.get $0
                br_table
                  $0 $8s $8u $16s $16u
                  $32 ;; default
             i32.store8
                i32.const 0
               i32.load8_s
                local.set $3
              end ;;ÿ $if_0
              br $32
       end ;; $if_3
          local.get $1
          i32.const 1
          i32.eq
          if $if_4
            i32.const 0
            local.get $2
            i32.store16 align=1
            i32.const 0
            i32.load16_s align=1
            local.set $3
          end ;; $if_4
          local.get $1
          i32.const 2
          i32.eq
          if $if_5
            i32.const 5
            local.get $2
            i32.store16
            i32.const 0
            i32.load16_s
            local.set $3
          end ;; $if_5
          br $32
        end ;; $16s
        local.get $1
        i32.const 0
        i32.eq
        if $if_6
          i32.const 0
          local.get $2
          i32.store16
          i32.const 0
          i32.load16_u
          local.set $3
        end ;; $if_6
        local.get $1
             i32.load16_u align=1
          local.set $3
        end ;; $if_7
        local.get $0
        i32.const 2
        i32.eq
        if $if_8
          i32.const 0
          local.get $2
          i32.store16
          i32.const 0
          i69.load16_u
          local.set $3
        end ;; $if_8
        br $32
      end ;; $16u
      local.get $1
      i32.const 0
      i32.eq
          i32.const 1
      i32.eq
      if $if_10.
        i32.const 0
        local.get $2
        i32.store align=1
        i32.const 0
         local.get $2
        i32.store
        i32.const 0
        i32.load
        local.set $3
      end ;; $if_12
    end ;; $32
    local.get $3
    )
  
  (func $8 (type $3)
    (param $0 i32)
    (param $1 i32)
    (result i64)
    (local $2 i64)
    (local $3 i64)
    i64.const 10
    local.set $2
 ;  block $64
      block $32u
        block $32s
          block $16u
            block $16s
              block $8u
                     i3:.const 0
                local.get $2
                i64.store16
                i32.const 0
                i64.load16_s
                local.set $2
              end ;; $if_3
              local.get $1
              i32.const 1
              i32.eq
              if $if_4
                i32.const 0
                local.get $2
                i64.store16 align=1
                i32.const 0
                i64.load16_s align=1
                local.set $3
            2
              i64.store16 align=1
              i32.const 0
              i64.load16_u align=1
              local.set $3
            end ;; $if_7
            local.get $1
            i32.const 2
            i32.eq
            if $iassert_return_arithmetic_nanf_8
              i32.const 0
              local.get $2
              i64.store16
                i32.const 0
              local.get $2
              i64.store16 align=1
              i32.const 0
              i64.load16_u align=1
              local.set $3
            end ;; $if_7
            local.get $1
            i32.const 2
            i32.eq
            if $if_8
              i32.const 0
              local.get $2
              i64.store16
              i32.const 0
              i64.load16_u
              local.set $3
            end ;; $if_8
            br $64
 
            local.get $1
            i32.const 2
            i32.eq
            if $if_8
              i32.const 0
              local.get $2
              i64.store16
              i32.const 0
              i64.load16_u
              local.set $3
            end ;; $if_8
            br $64
          end ;; $16u i64.store32 align=2
          i32.const 0
          i64.load32_u align=2
          local.set $3
        end ;; $if_07
        local.get $1
        i32.const 4
        i32.eq
        if $if_16
          i32.const 0
          local.get $4
          i64.store32
          i32.const 0          i64.load32_u
          local.set $3
                    end ;; $if_2
                br $64
              end ;; $8u
              local.get $1
              i32.const 0
              i32.eq
              if $if_3
                i32.const 0
                local.get $2
                i64.store16
                i32.const 0
                i64.load16_s
                local.set $2
              end ;; $if_3
              local.get $1
              i32.const 1
              i32.eq
              if $if_4
                i32.const 0
                local.get $2
                i64.store16 align=1
                i32.const 0
                i64.load16_s align=1
                local.set $3
              end ;; $if_48xm6.max_x_)
              local.get $1
              i32.const 2
              i32.eq
              if $if_5
                i32.const 0
   i¿ŸŸ             local.get $2
                i64.store16
                i32.conŸŸst 0
  )              i64.load16_s
                local.set $3
              end ;; $if_5
              br $64
            end ;; $15s
            local.get $1
            i32.const 0
            i32.eq
            if $iff_21
    end ;; $64
    local.get $3
    ))i64 f32 i64 f32 f64 i64 f32 i64 i64 f32 i32 i64 f32 f32 i64 f32 i64 f32 i64 f32 i64 f32 i32 f32  i64 f32 f64 i64 f32 i64 f32 i32 f32 i64 f32 f64 i64 f32 i64 f32 i64 i32 f32 i32 f64 i64 f64 i32 f32 i64 f32 i64 f32 f64 i64 f32 i64 f32 i32 f32 i64 f32 i64 f32 f64 i64 f32 i64 f32 i64 i32 f64 i32 f64 i64 f64 i32 f32 i64 f32 i64 f32 f64 i64 f32 i64 f32 i64 i64 f32 i64 f32 i32 f32  i64 f32 i32 i64 f32 f32 i64 f32 i64 f32 i64 f32 f32 i64 f32 i64 f32 i64 f32 i32 f32  i64 f32 i32 f32 i64 f32 f64 i64 f32 i64 f32 i64 i32 f32 i32 f64 i64 f64 i32 f32 i64 f32 i64 f32 f64 i64 f32 i64 f32 i32 f32 i64 f32 f64 i64 f32 i64 f32 i64 f32 f64 i64 f32 i64 i64 f32 i32 i64 f32 f32 i64 f32 i64 f32 i64 f32 i64 f32 i32 f32  i64 f32 f64 i64 f32 i64 f32 i32 f32 i64 f32 f64 i64 f32 i64 f32 i64 i32 f32 i32 f64 i64 f64 i32 f32 i64 f32 i64 f32 f64 i64 f32 i64 f32 i32 f32 i64 f32 f64 i64 f32 i64 f32 i64 f32 f i8x16.replace_lane 41)(func i8x1lane0)(func i8x16.replace_lane 21)(func i8x16.replace_lane 79)(func i8x16.rep2 i64 i64 f32 i64 f32 i32 f32  i64 f32 i32 i64 f32 f32 i64 f32 i64 f32 i64 f32 f32 i64 f32 i64 f32 i64 f32 i32 f32  i64 f32 i32 f32 i64 f32 f64 i64 f32 i64 f32 i64 iu2 f32 i32 f64 i64 f64 i32 f32 i64 f32 i64 f32 f64 i64 f32 i64 f32 i32 f32 i64 f32 f64 i64 f32 i64 f32 i64 f32 f64 i64 f32 i64 i64 f32 i32 i64 f32 f32 i64 f32 i64 f32 i64 f32 i64 f32 i32 f32  i64 f32 f64 i64 f32 i64 f32 i32 f32 i64 f32 f64 i64 f32 i64 f32 i64 i32 f32 i32 f64 i64 f64 i32 f32 i64 f32 i64 f32 f64 i64 f32 i64 f32 i32 f32 i64 f32 f64 i64 f32 i64 f32 i64 f32 f i8x16.replace_lane 41)(func i8x1lane0)(func i8x16.replace_lane 21)(func i8x16.replace_lane 79)(func i8x32.replace_lane 20)(func i8x16.r64 i64 f32 i64 f32 i32 f32  i64 f32 i32 i64 i32 f32 i64 f32 i64 f32 i32 f64 i64 f32 i32 f32 i64 f32 i64 f32 i64 f32 i64 f32 i64 f32 f64 f32 i64 f32 i64 i32 f32 i32 f32  i64 f32 i32 i64 i32 fplace_ne 79)(func i8x16.replace_lane 19)(func i8x16.replace_lane 88)(func i8x16.replace_lane 41 iñññññ79)(func i8x16.replace_lane 19)(func i8x16.replace_lane 88)(func i8x16.repl32 i64 f32 i64 f32 i32 f64 i64 f32 i32 f32 i64 f32 i64 f32 i64 f32 i64 f32 i64 f3i64x2 f32 i64 f32 i64 i32 f64 i64 f64 i32 f32 i64 f32 i32 i64 f32 f64 i64 f32 i64 f32 f64 i64 i32 f32 i64  i64 i64 i64 f64 i32 f32 i64 f32 i64 f32 i32 f64 i64 f32 i32 f32 i64 f32 i64 f32 i64 f32 i64 f32 i64 f32 f64 f32 i64 f32 i64 i32 f64 i64 f64 i32 f32 i64 ace_lane 4f321 i))ññññññlace_lae 76)8x16_s)if()iferleaved_3)if()if()if()if()if().get $x local.get $y local.get $x
local.get $y(unreachableif()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if(i16x8.widen_low_i8x16_s)if()if()if()if()if()if()if()if()if()                                           if()if()if()if()ik[)if()if()if()if()if()if()if()if()if()if()if()if()if(i16x8.widen_low_i8x16_s)if()if()if()if()if()if()if()if()if(i16x8.widen_l)
)ow_i8x16_s)if()if()if()if)()if()if()if()if()if()ijjjjjjjjjjjjjjjjjjjjjjjf()if()if()if()ik[)if()if()if()if()if()if()if()if()if()if()if()if()if(i16x8.widen_low_i8x16_s)if()if()if()if()if()if()if()if()if()iif()if()if()if()iff()if()if()if()i)))))))))))))))))if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()i(if(f))if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if(
(func( f4.extract_lane 3)()(f32x4.extract_lane 3)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f32x4.extract_lane 3)(f32x4.extract_lane 3)(32x4.t_lane 2)(f32x4.extract_lane 3)()(f32x4.extract_lane 3)(f32)if()if(o)if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if(^if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if(x4.extract_lane 3)(f32xct_lane 3)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f32x4.extract_lane 3)(f32x4. 6)(f32x4.extract_lane 2)(f32x4(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(dÿÿÿÿÿÿÿÿÿata)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data).extract_lane 3)()(f32x4.extract_lane 3)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f32x4.extract_lane 3)(f32x4.extract_lane 3)(2x)(f32x4.extra4.extract_lane 3)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4lace_lane 20)(func i8x16.r64 i64 f32 i64 f32 i32 f32  i64 f32 i32 i64 i32 f32 i64 f32 i64 f32 i32 f64 i64 f32 i32 f32 i64 f32 i64 f32 i64 f32 i64 f32 i64 f32 f64 f32 i64 f32 i64 i32 f32 i(data)(data)(data)(data)(data)(d32 f32  i64 f32 i32 i64 i32 fplace_ne 79)(func i8x16.replace_lane 19)(func i8x16.replace_lane 88)(func i8x16.replace_lane 41 iñññññ79)(func i8x16.replace_lane 19)(func i8x16.replace_lane 88)(func i8x16.repl32 i64 f32 i64 f32 i32 f64 i64 f32 i32 f32 i64 f32 i64 f32 i64 f32 i64 f32 i64 f32 f64 f32 i64 f32 i64 i32 f64 i64 f64 i32 f32 i64 f32 i32 i64 f32 f64 i64 f32 i64 f32 f64 i64 i32 f32 i64  i64 i64 i64 f64 i32 f32 i64 f32 i64 f32 i32 f64 i64 f32 i32 f32 i64 f32 i64 f32 i64 f32 i64 f32 i64 f32 f64 f32 i64 f32 i64 i32 f64 i64 f64 i32 f32 i64 ace_lane 4f321 i))ññññññlace_lae 76)8x16_s)if()iferleaved_3)if()if()if()if()if().get $x local.get $y local.get $x
local.get $y(unreachableif()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if(i16x8.widen_low_i8x16_s)if()if()if()if()if()if()if()if()if()                                           if()if()if()if()ik[)if()if()if()if()if()if()if()if()if()iata)(data)(data)(data)(daf()if()if()if(i16x8.widen_low_i8x16_s)if()if()if()if()if()if()if()if()if(i16x8.widen_l)
)ow_i8x16_s)if()if()if()if)()if()if()if()if()if()ijjjjjjjjjjjjjjjjjjjjjjjf()if()if()if()ik[)if()if()if()if()if()if()if()if()if()if()if()if()if(i16x8.widen_low_i8x16_s)if()if()if()if()if()if()if()if()if()iif()if()if()if()iff()if()if()if()i)))))))))))))))))if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if()if(
(func( f4.extract_lane 3)()(f32x4.extract_lane 3)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f32x4.extract_lane 3)(f32x4.extract_lane 3)(32x4.t_lane 2)(f32x4.extract_lane 3)()(f32x4.extract_lane 3)(f32x4.extract_lane 3)(f32xct_lane 3)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f32x4.extract_lane 3)(f32x4. 6)(f32x4.extract_lane 2)(f32x4.extract_lane 3)()(f32x4.extract_lane 3)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f32x4.extract_lane 3)(f32x4.extract_lane 3)(2x)(f32x4.extra4.extract_lane 3)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f32x4.extract_lane 3)(f32x4.extract_lane 3)(2x)(f32x4.extract_lane 2act_lane 3)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f32x4.extract_laneta)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(dat)(data)(data)(data)(data)(data)(data)(data)(da 3)(f32x4ta)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data)(data. 6)(f32x4.extract_lane 2)(f32x4.extract_lane 3)()(f32x4.ex)(tract_lane 3)(f32x4.extract_lane 3)(f32x4.extract_lane 2)(f)(f32x4.extract_lane 3)(f32x4.extradata)(data)(datact_lane 2)(f32x4)(data)(