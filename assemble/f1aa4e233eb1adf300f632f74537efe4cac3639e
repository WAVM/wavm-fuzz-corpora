(module
  (type $check (func (param i32 i32) (result i32)))
  (type $block-sig-1 (func))
  (type $block-sig-2 (func (result i32)))
  (type $block-sig-3 (func (param i32)))
  (type $block-sig-4 (func (param i32 f64 i32) (result i32 f64 i32)))
  (type $0 (func (param i32) (result i32)))
  (type $1 (func (param i32) (result i32 i32)))
  (type $2 (func (param i32) (result i32 i32 i64)))
  (type $3 (func (param i64 i64 i32) (result i64 i32)))
  (type $4 (func (param i64 i64) (result i64)))
  (type $5 (func (result i32 i64 i32)))
  (type $6 (func (result i32 i32)))
  (type $7 (func (result f32 f32)))
  (type $8 (func (result i32 i32 i64)))
  (type $9 (func (param i32 i32) (result i32 i32)))
  (type $10 (func (param i64) (result i64)))
  (memory $12  1)
  (table $11  1 1 funcref)
  (global $a  (mut i32) (i32.const 10))
  (export "empty" (func $14))
  (export "singular" (func $15))
  (export "multi" (func $16))
  (export "nested" (func $17))
  (export "as-select-first" (func $18))
  (export "as-select-mid" (func $19))
  (export "as-select-last" (func $20))
  (export "as-loop-first" (func $21))
  (export "as-loop-mid" (func $22))
  (export "as-loop-last" (func $23))
  (export "as-if-condition" (func $24))
  (export "as-br_if-first" (func $25))
  (export "as-br_if-last" (func $26))
  (export "as-br_table-first" (func $27))
  (export "as-br_table-last" (func $28))
  (export "as-call_indirect-first" (func $29))
  (export "as-call_indirect-mid" (func $30))
  (export "as-call_indirect-last" (func $31))
  (export "as-store-first" (func $32))
  (export "as-store-last" (func $33))
  (export "as-memory.grow-value" (func $34))
  (export "as-call-value" (func $35))
  (export "as-return-value" (func $36))
  (export "as-drop-operand" (func $37))
  (export "as-br-value" (func $38))
  (export "as-local.set-value" (func $39))
  (export "as-local.tee-value" (func $40))
  (export "as-mixed-operands" (func $49))
  (export "break-bare" (func $50))
  (export "break-value" (func $51))
  (export "break-multi-value" (func $52))
  (export "param" (func $53))
  (export "params" (func $54))
  (export "params-id" (func $55))
  (export "param-break" (func $56))
  (export "params-break" (func $57))
  (export "params-id-break" (func $58))
  (export "effects" (func $59))
  (export "add64_u_with_carry" (func $add64_u_with_carry))
  (export "add64_u_saturated" (func $add64_u_saturated))
  (export "type-use" (func $60))
  (elem $13 (i32.const 0)
    $func)
  
  (func $dummy (type $block-sig-1)
    )
  
  (func $14 (type $block-sig-3)
    (param $0 i32)
    local.get $0
    if $0
    end ;; $0
    local.get $0
    if $1
    else
    end ;; $1
    local.get $0
    if $l
    end ;; $l
    local.get $0
    if $l_0
    else
    end ;; $l_0
    )
  
  (func $15 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if
      nop
    end ;; $if
    local.get $0
    if $if_0
      nop
    else
      nop
    end ;; $if_0
    local.get $0
    if $if_1 (result i32)
      i32.const 7
    else
      i32.const 8
    end ;; $if_1
    )
  
  (func $16 (type $1)
    (param $0 i32)
    (result i32 i32)
    local.get $0
    if $if
      call $dummy
      call $dummy
      call $dummy
    end ;; $if
    local.get $0
    if $if_0
    else
      call $dummy
      call $dummy
      call $dummy
    end ;; $if_0
    local.get $0
    if $if_1 (result i32)
      call $dummy
      call $dummy
      i32.const 8
      call $dummy
    else
      call $dummy
      call $dummy
      i32.const 9
      call $dummy
    end ;; $if_1
    local.get $0
    if $if_2 (result i32 i64 i32)
      call $dummy
      call $dummy
      i32.const 1
      call $dummy
      call $dummy
      call $dummy
      i64.const 2
      call $dummy
      call $dummy
      call $dummy
      i32.const 3
      call $dummy
    else
      call $dummy
      call $dummy
      i32.const -1
      call $dummy
      call $dummy
      call $dummy
      i64.const -2
      call $dummy
      call $dummy
      call $dummy
      i32.const -3
      call $dummy
    end ;; $if_2
    drop
    drop
    )
  
  (func $17 (type $check)
    (param $0 i32)
    (param $1 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      local.get $1
      if $if_0
        call $dummy
        block $block
        end ;; $block
        nop
      end ;; $if_0
      local.get $1
      if $if_1
      else
        call $dummy
        block $block_0
        end ;; $block_0
        nop
      end ;; $if_1
      local.get $1
      if $if_2 (result i32)
        call $dummy
        i32.const 9
      else
        call $dummy
        i32.const 10
      end ;; $if_2
    else
      local.get $1
      if $if_3
        call $dummy
        block $block_1
        end ;; $block_1
        nop
      end ;; $if_3
      local.get $1
      if $if_4
      else
        call $dummy
        block $block_2
        end ;; $block_2
        nop
      end ;; $if_4
      local.get $1
      if $if_5 (result i32)
        call $dummy
        i32.const 10
      else
        call $dummy
        i32.const 11
      end ;; $if_5
    end ;; $if
    )
  
  (func $18 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      call $dummy
      i32.const 1
    else
      call $dummy
      i32.const 0
    end ;; $if
    i32.const 2
    i32.const 3
    select
    )
  
  (func $19 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 2
    local.get $0
    if $if (result i32)
      call $dummy
      i32.const 1
    else
      call $dummy
      i32.const 0
    end ;; $if
    i32.const 3
    select
    )
  
  (func $20 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 2
    i32.const 3
    local.get $0
    if $if (result i32)
      call $dummy
      i32.const 1
    else
      call $dummy
      i32.const 0
    end ;; $if
    select
    )
  
  (func $21 (type $0)
    (param $0 i32)
    (result i32)
    loop $loop (result i32)
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
      call $dummy
      call $dummy
    end ;; $loop
    )
  
  (func $22 (type $0)
    (param $0 i32)
    (result i32)
    loop $loop (result i32)
      call $dummy
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
      call $dummy
    end ;; $loop
    )
  
  (func $23 (type $0)
    (param $0 i32)
    (result i32)
    loop $loop (result i32)
      call $dummy
      call $dummy
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
    end ;; $loop
    )
  
  (func $24 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      i32.const 1
    else
      i32.const 0
    end ;; $if
    if $if_0 (result i32)
      call $dummy
      i32.const 2
    else
      call $dummy
      i32.const 3
    end ;; $if_0
    )
  
  (func $25 (type $0)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
      i32.const 2
      br_if $block
      i32.const 3
      return
    end ;; $block
    )
  
  (func $26 (type $0)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      i32.const 2
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
      br_if $block
      i32.const 3
      return
    end ;; $block
    )
  
  (func $27 (type $0)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
      i32.const 2
      br_table
        $block
        $block ;; default
    end ;; $block
    )
  
  (func $28 (type $0)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      i32.const 2
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
      br_table
        $block
        $block ;; default
    end ;; $block
    )
  
  (func $func (type $check)
    (param $0 i32)
    (param $1 i32)
    (result i32)
    local.get $0
    )
  
  (func $29 (type $0)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
      i32.const 2
      i32.const 0
      call_indirect $11 (type $check)
    end ;; $block
    )
  
  (func $30 (type $0)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      i32.const 2
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
      i32.const 0
      call_indirect $11 (type $check)
    end ;; $block
    )
  
  (func $31 (type $0)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      i32.const 2
      i32.const 0
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
      call_indirect $11 (type $check)
    end ;; $block
    )
  
  (func $32 (type $block-sig-3)
    (param $0 i32)
    local.get $0
    if $if (result i32)
      call $dummy
      i32.const 1
    else
      call $dummy
      i32.const 0
    end ;; $if
    i32.const 2
    i32.store
    )
  
  (func $33 (type $block-sig-3)
    (param $0 i32)
    i32.const 2
    local.get $0
    if $if (result i32)
      call $dummy
      i32.const 1
    else
      call $dummy
      i32.const 0
    end ;; $if
    i32.store
    )
  
  (func $34 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      i32.const 1
    else
      i32.const 0
    end ;; $if
    memory.grow
    )
  
  (func $f (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    )
  
  (func $35 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      i32.const 1
    else
      i32.const 0
    end ;; $if
    call $f
    )
  
  (func $36 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      i32.const 1
    else
      i32.const 0
    end ;; $if
    return
    )
  
  (func $37 (type $block-sig-3)
    (param $0 i32)
    local.get $0
    if $if (result i32)
      i32.const 1
    else
      i32.const 0
    end ;; $if
    drop
    )
  
  (func $38 (type $0)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      local.get $0
      if $if (result i32)
        i32.const 1
      else
        i32.const 0
      end ;; $if
      br $block
    end ;; $block
    )
  
  (func $39 (type $0)
    (param $0 i32)
    (result i32)
    (local $1 i32)
    local.get $0
    if $if (result i32)
      i32.const 1
    else
      i32.const 0
    end ;; $if
    local.set $0
    local.get $0
    )
  
  (func $40 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      i32.const 1
    else
      i32.const 0
    end ;; $if
    local.tee $0
    )
  
  (func $41 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      i32.const 1
    else
      i32.const 0
    end ;; $if
    global.set $a
    global.get $a
    )
  
  (func $42 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      i32.const 11
    else
      i32.const 10
    end ;; $if
    i32.load
    )
  
  (func $43 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      call $dummy
      i32.const 13
    else
      call $dummy
      i32.const -13
    end ;; $if
    i32.ctz
    )
  
  (func $44 (type $check)
    (param $0 i32)
    (param $1 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      call $dummy
      i32.const 3
    else
      call $dummy
      i32.const -3
    end ;; $if
    local.get $1
    if $if_0 (result i32)
      call $dummy
      i32.const 4
    else
      call $dummy
      i32.const -5
    end ;; $if_0
    i32.mul
    )
  
  (func $45 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      call $dummy
      i32.const 13
    else
      call $dummy
      i32.const 0
    end ;; $if
    i32.eqz
    )
  
  (func $46 (type $check)
    (param $0 i32)
    (param $1 i32)
    (result i32)
    local.get $0
    if $if (result f32)
      call $dummy
      f32.const 0x1.800000p+1
    else
      call $dummy
      f32.const -0x1.800000p+1
    end ;; $if
    local.get $1
    if $if_0 (result f32)
      call $dummy
      f32.const 0x1.000000p+2
    else
      call $dummy
      f32.const -0x1.000000p+2
    end ;; $if_0
    f32.gt
    )
  
  (func $47 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32 i32)
      call $dummy
      i32.const 3
      call $dummy
      i32.const 4
    else
      call $dummy
      i32.const 3
      call $dummy
      i32.const -4
    end ;; $if
    i32.mul
    )
  
  (func $48 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result f32 f32)
      call $dummy
      f32.const 0x1.800000p+1
      call $dummy
      f32.const 0x1.800000p+1
    else
      call $dummy
      f32.const -0x1.000000p+1
      call $dummy
      f32.const -0x1.800000p+1
    end ;; $if
    f32.gt
    )
  
  (func $49 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32 i32)
      call $dummy
      i32.const 3
      call $dummy
      i32.const 4
    else
      call $dummy
      i32.const -3
      call $dummy
      i32.const -4
    end ;; $if
    i32.const 5
    i32.add
    i32.mul
    )
  
  (func $50 (type $block-sig-2)
    (result i32)
    i32.const 1
    if $if
      br $if
      unreachable
    end ;; $if
    i32.const 1
    if $if_0
      br $if_0
      unreachable
    else
      unreachable
    end ;; $if_0
    i32.const 0
    if $if_1
      unreachable
    else
      br $if_1
      unreachable
    end ;; $if_1
    i32.const 1
    if $if_2
      i32.const 1
      br_if $if_2
      unreachable
    end ;; $if_2
    i32.const 1
    if $if_3
      i32.const 1
      br_if $if_3
      unreachable
    else
      unreachable
    end ;; $if_3
    i32.const 0
    if $if_4
      unreachable
    else
      i32.const 1
      br_if $if_4
      unreachable
    end ;; $if_4
    i32.const 1
    if $if_5
      i32.const 0
      br_table
        $if_5 ;; default
      unreachable
    end ;; $if_5
    i32.const 1
    if $if_6
      i32.const 0
      br_table
        $if_6 ;; default
      unreachable
    else
      unreachable
    end ;; $if_6
    i32.const 0
    if $if_7
      unreachable
    else
      i32.const 0
      br_table
        $if_7 ;; default
      unreachable
    end ;; $if_7
    i32.const 19
    )
  
  (func $51 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      i32.const 18
      br $if
      i32.const 19
    else
      i32.const 21
      br $if
      i32.const 20
    end ;; $if
    )
  
  (func $52 (type $2)
    (param $0 i32)
    (result i32 i32 i64)
    local.get $0
    if $if (result i32 i32 i64)
      i32.const 18
      i32.const -18
      i64.const 18
      br $if
      i32.const 19
      i32.const -19
      i64.const 19
    else
      i32.const -18
      i32.const 18
      i64.const -18
      br $if
      i32.const -19
      i32.const 19
      i64.const -19
    end ;; $if
    )
  
  (func $53 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 1
    local.get $0
    if $if (param i32) (result i32)
      i32.const 2
      i32.add
    else
      i32.const -2
      i32.add
    end ;; $if
    )
  
  (func $54 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 1
    i32.const 2
    local.get $0
    if $if (param i32 i32) (result i32)
      i32.add
    else
      i32.sub
    end ;; $if
    )
  
  (func $55 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 1
    i32.const 2
    local.get $0
    if $if (param i32 i32) (result i32 i32)
    end ;; $if
    i32.add
    )
  
  (func $56 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 1
    local.get $0
    if $if (param i32) (result i32)
      i32.const 2
      i32.add
      br $if
    else
      i32.const -2
      i32.add
      br $if
    end ;; $if
    )
  
  (func $57 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 1
    i32.const 2
    local.get $0
    if $if (param i32 i32) (result i32)
      i32.add
      br $if
    else
      i32.sub
      br $if
    end ;; $if
    )
  
  (func $58 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 1
    i32.const 2
    local.get $0
    if $if (param i32 i32) (result i32 i32)
      br $if
    end ;; $if
    i32.add
    )
  
  (func $59 (type $0)
    (param $0 i32)
    (result i32)
    (local $1 i32)
    block $block (result i32)
      i32.const 1
      local.set $1
      local.get $0
    end ;; $block
    if $if
      local.get $1
      i32.const 3
      i32.mul
      local.set $1
      local.get $1
      i32.const 5
      i32.sub
      local.set $1
      local.get $1
      i32.const 7
      i32.mul
      local.set $1
      br $if
      local.get $1
      i32.const 100
      i32.mul
      local.set $1
    else
      local.get $1
      i32.const 5
      i32.mul
      local.set $1
      local.get $1
      i32.const 7
      i32.sub
      local.set $1
      local.get $1
      i32.const 3
      i32.mul
      local.set $1
      br $if
      local.get $1
      i32.const 1000
      i32.mul
      local.set $1
    end ;; $if
    local.get $1
    )
  
  (func $add64_u_with_carry (type $3)
    (param $i i64)
    (param $j i64)
    (param $c i32)
    (result i64 i32)
    (local $k i64)
    local.get $i
    local.get $j
    i64.add
    local.get $c
    i64.extend_i32_u
    i64.add
    local.set $k
    local.get $k
    local.get $k
    local.get $i
    i64.lt_u
    return
    )
  
  (func $add64_u_saturated (type $4)
    (param $0 i64)
    (param $1 i64)
    (result i64)
    local.get $0
    local.get $1
    i32.const 0
    call $add64_u_with_carry
    if $if (param i64) (result i64)
      drop
      i64.const -1
    end ;; $if
    )
  
  (func $60 (type $block-sig-1)
    i32.const 1
    if $if
    end ;; $if
    i32.const 1
    if $if_0 (result i32)
      i32.const 0
    else
      i32.const 2
    end ;; $if_0
    i32.const 1
    if $if_1 (param i32)
      drop
    else
      drop
    end ;; $if_1
    i32.const 0
    f64.const 0x0.0000000000000p-1023
    i32.const 0
    i32.const 1
    if $if_2 (param i32 f64 i32) (result i32 f64 i32)
    end ;; $if_2
    drop
    drop
    drop
    i32.const 1
    if $if_3 (result i32)
      i32.const 0
    else
      i32.const 2
    end ;; $if_3
    i32.const 1
    if $if_4 (param i32)
      drop
    else
      drop
    end ;; $if_4
    i32.const 0
    f64.const 0x0.0000000000000p-1023
    i32.const 0
    i32.const 1
    if $if_5 (param i32 f64 i32) (result i32 f64 i32)
    end ;; $if_5
    drop
    drop
    drop
    ))