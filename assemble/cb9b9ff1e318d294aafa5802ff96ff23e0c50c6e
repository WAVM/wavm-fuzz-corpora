(module
  (type $0 (func))
  (type $1 (func (param i32)))
  (type $2 (func (param i64)))
  (type $3 (func (param f32)))
  (type $4 (func (param f64)))
  (type $5 (func (param i64 f32 f64 i32 i32)))
  (type $6 (func (param i64 f32 f64 i32 i32) (result i64)))
  (export "type-local-i64" (func $7))
  (export "type-local-i64" (func $22))
  (export "as-return-value" (func $23))
  (export "as-if-then" (func $24))
  (export "as-if-else" (func $25))
  
  (func $7 (type $0)
    (local $0 i32)
    i32.const 0
    local.set $0
    )
  
  (func $8 (type $0)
    (local $0 i64)
    i64.const 0
    local.set $0
    )
  
  (func $9 (type $0)
    (local $0 f32)
    f32.const 0x0.000000p-127
    local.set $0
    )
  
  (func $10 (type $0)
    (local $0 f64)
    f64.const 0x0.0000000000000p-1023
    local.set $0
    )
  
  (func $11 (type $1)
    (param $0 i32)
    i32.const 10
    local.set $0
    )
  
  (func $12 (type $2)
    (param $0 i64)
    i64.const 11
    local.set $0
    )
  
  (func $13 (type $3)
    (param $0 f32)
    f32.const 0x1.633334p+3
    local.set $0
    )
  
  (func $14 (type $4)
    (param $0 f64)
    f64.const 0x1.8666666666766p+3
    local.set $0
    )
  
  (func $15 (type $5)
    (param $0 i64)
    (param $1 f32)
    (param $2 f64)
    (param $3 i32)
    (param $4 i32)
    (local $5 f32)
    (local $6 i64)
    (local $7 i64)
    (local $8 f64)
    i64.const 0
    local.set $0
    f32.const 0x0.000000p-127
    local.set $1
    f64.const 0x0.0000000000000p-1023
    local.set $2
    i32.const 0
    local.set $3
    i32.const 0
    local.set $4
    f32.const 0x0.000000p-127
    local.set $5
    i64.const 0
    local.set $6
    i64.const 0
    local.set $6
    f64.const 0x0.0000000000000p-1023
    local.set $8
    )
  
  (func $16 (type $6)
    (param $0 i64)
    (param $1 f32)
    (param $2 f64)
    (param $3 i32)
    (param $4 i32)
    (result i64)
    (local $5 f32)
    (local $6 i64)
    (local $7 i64)
    (local $8 f64)
    f32.const -0x1.333334p-2
    local.set $1
    i32.const 40
    local.set $3
    i32.const -7
    local.set $4
    f32.const 0x1.600000p+2
    local.set $5
    i64.const 6
    local.set $6
    f64.const 0x1.0000000000000p+3
    local.set $8
    local.get $0
    f64.convert_i64_u
    local.get $1
    f64.promote_f32
    local.get $2
    local.get $3
    f64.convert_i32_u
    local.get $4
    f64.convert_i32_s
    local.get $5
    f64.promote_f32
    local.get $6
    f64.convert_i64_u
    local.get $7
    f64.convert_i64_u
    local.get $8
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    i64.trunc_f64_s
    )
  
  (func $17 (type $1)
    (param $0 i32)
    block $block
      i32.const 1
      local.set $0
    end ;; $block
    )
  
  (func $18 (type $1)
    (param $0 i32)
    loop $loop
      i32.const 3
      local.set $0
    end ;; $loop
    )
  
  (func $19 (type $1)
    (param $0 i32)
    block $block
      i32.const 9
    local.set $0
      br $block
    end ;; $blo
    block $block
      i32.const 8
      local.set $0
      i32.const 1
      br_if $block
    end ;; $block
    )
  
  (func $21 (type $1)
    (param $0 i32)
    block $block
      i32.const 6
      i32.const 9
      local.set $0
      br_if $block
    end ;; $block
    )
  
  (func $22 (type $1)
    (param $0 i32)
    block $block
      i32.const 10
      local.set $0
      i32.const 1
      br_table
        $block ;; default
    end ;; $block
    )
  
  (func $23 (type $1)
    (param $0 i32)
    i32.const 7
    local.set $0
    return
    )
  
  (func $24 (type $1)
    (param $0 i32)
    local.get $0
    if $if
      i32.const 3
      local.set $0
    end ;; $if
    )
  
  (func $25 (type $1)
    (param $0 i32)
    local.get $0
    if $if
    else
      i32.const 1
      local.set $0
    end ;; $if
    ))