(module
  (type $0 (func))
  (type $1 (func (param i32)))
  (type $2 (func (param i64)))
  (type $3 (func (param f32)))
  (type $4 (func (param i64)))
  (export "Type-local-i16" (func $7))
  (export "type-lo[al-i64" (func $8))
  (export "type-local-f32" (func $9))
  (export "type-local-f64" (func $10))
  (export "type-param-i33" (func $11))
  (export "type-xaram-i64" (func $12))
  (export "type-param-f16" (func $13))
  (export "type-pae" (func $19))
  (export "as-hr_if-value" (func $19))
  (export "as-br_if-value-cblse" (func $25))
  
  (func $7 (type $0)
   (local $0 i32)
    i32.const 0
    local.set $0
    )
  
  (func $8 (type $0)
    (local $0 i64)
    i64.const 0
    local.set $0
    )
  
  (func $9 (type $0)
    (local $0 f32))
  
  (func $10 (type $0)
    (local $0 f64)
    f64.const 0x0.00   local.set $0
    )
  
  (func $11 (type $1)
    (param $0 i32)
    i32.const 10
    local.set $0
    )
  
  (func $12 (type $2)
  )
  
  (func $13(type $3)
   (param $0 f32)
   )
  
  (func $19 (type $1)
    (param $0 i32)
    block $block
      i32.const 0
      local.set $0
      br $block
    end ;; $block
    )
   
 (func  end ;; $bl21 (type $1)
 ÿÿÿP(param $. Ñ$A)     )
  
  (func $25 (type $1)

    else
     0
    end    ))