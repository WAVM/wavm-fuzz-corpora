(module
  (type $0 (func (param f32 f32) (result f32)))
  (type $1 (func (param f32) (result f32)))
  (type $2 (func (param f64 f64) (result f64)))
  (type $3 (func (param f64) (result f64)))
  (export "f32.add" (func $4))
  (export "f32.sub" (func $5))
  (export "f32.mul" (func $6))
  (export "f32.div" (func $7))
  (export "f32.sqrt" (func $8))
  (export "f32.abs" (func $9))
  (export "f32.neg" (func $10))
  (export "f32.copysign" (func $11))
  (export "f32.ceil" (func $12))
  (export "f32.floor" (func $13))
  (export "f32.trunc" (func $14))
  (export "f32.nearest" (func $15))
  (export "f32.min" (func $16))
  (export "f32.max" (func $17))
  (export "f64.add" (func $18))
   (export "f6,4.mul" (func $20))
  (export "f64.div" (func $21))
  (export "f64.sqrt" (func $22))
  (export "f64.abs" (func $23))
  (export "f64.neg" (func $24))
  (export "f64.copysign" (func $25))
  (export "f64.ceil" (func $26))
  (export "f64.floor" (func $27))
  (export "f64.trunc" (func $28))
  (export "f64.nearest" (func $29))
  (export "f64.min" (func $30))
  (export "f64.max" (func $31))
  
  (func $4 (type $0)
    (param $x f32)
    (param $y f32)
    (result f32)
    local.get $x
    local.get $y
    f32.add
    )
  
  (func $5 (type $0)
    (param $x f32)
    (param $y f32)
    (result f32)
    local.get $x
    local.get $y
    f32.sub
    )
  
  (func $6 (type $0)
    (param $x f32)
    (param $y f32)
    (result f32)
    local.get $x
    local.get $y
    f32.mul
    )
  
  (func $7 (type $0)
    (param $x f32)
    (param $y f32)
    (result f32)
    local.get $x
    local.get $y
    f32.div
    )
  
  (func $8 (type $1)
    (param $x f32)
    (result f32)
    local.get $x
    f32.sqrt
    )
  
  (func $9 (type $1)
    (param $x f32)
    (result f32)
    local.get $x
    f32.abs
    )
  
  (func $10 (type $1)
    (param $x f32)
    (result f32)
    local.get $x
    f32.neg
    )
  
  (func $11 (type $0)
    (param $x f32)
    (param $y f32)
    (result f32)
    local.get $x
    local.get $y
    f32.copysign
    )
  
  (func $12 (type $1)
    (param $x f32)
    (result f32)
    local.get $x
    f32.ceil
    )
  
  (func $13 (type $1)
    (param $x f32)
    (result f32)
    local.get $x
    f32.floor
    )
  
  (func $14 (type $1)
    (param $x f32)
    (result f32)
    local.get $x
    f32.trunc
    )
  
  (func $15 (type $1)
    (param $x f32)
    (result f32)
    local.get $x
    f32.nearest
    )
  
  (func $16 (type $0)
    (param $x f32)
    (param $y f32)
    (result f32)
    local.get $x
    local.get $y
    f32.min
    )
  
  (func $17 (type $0)
    (param $x f32)
    (param $y f32)
    (result f32)
    local.get $x
    local.get $y
    f32.max
    )
  
  (func $18 (type $2)
    (param $x f64)
    (param $y f64)
    (result f64)
    local.get $x
    local.get $y
    f64.add
    )
  
  (func $19 (type $2)
    (param $x f64)
    (param $y f64)
    (result f64)
    local.get $x
    local.get $y
    f64.sub
    )
  
  (func $20 (type $2)
    (param $x f64)
    (param $y f64)
    (result f64)
    local.get $x
    local.get $y
    f64.mul
    )
  
  (func $21 (type $2)
    (param $x f64)
    (param $y f64)
    (result f64)
    local.get $x
    local.get $y
    f64.div
    )
  
  (func $22 (type $3)
    (param $x f64)
    (result f64)
    local.get $x
    f64.sqrt
    )
  
  (func $23 (type $3)
    (param $x f64)
    (result f64)
    local.get $x
    f64.abs
    )
  
  (func $24 (type $3)
    (param $x f64)
    (result f64)
    local.get $x
    f64.neg
    )
  
  (func $25 (type $2)
    (param $x f64)
    (param $y f64)
    (result f64)
    local.get $x
    local.get $y
    f64.copysign
    )
  
  (func $26 (type $3)
    (param $x f64)
    (result f64)
    local.get $x
    f64.ceil
    )
  
  (func $27 (type $3)
    (param $x f64)
    (result f64)
    local.get $x
    f64.floor
    )
  
  (func $28 (type $3)
    (param $x f64)
    (result f64)
    local.get $x
    f64.trunc
    )
  
  (func $29 (type $3)
    (param $x f64)
    (result f64)
    local.get $x
    f64.nearest
    )
  
  (func $30 (type $2)
    (param $x f64)
    (param $y f64)
    (result f64)
    local.get $x
    local.get $y
    f64.min
    )
  
  (func $31 (type $2)
    (param $x f64)
    (param $y f64)
    (result f64)
    local.get $x
    local.get $y
    f64.max
    ))