(module
  (type $check (func (param i32 i32) (result i32)))
  (type $block-sig-1 (func))
  (type $block-sig-2 (func (result i32)))
  (type $block-sig-3 (func (param i32)))
  (type $block-sig-4 (func (param i32 f64 i32) (result i32 f64 i32)))
  (type $0 (func (param i32) (result i32)))
  (type $1 (func (result i32 i32 i64)))
  (type $2 (func (param i64) (result i64)))
  (type $3 (func (param f32 f32) (result f32)))
  (type $4 (func (result i32 i64 i32)))
  (type $5 (func (result i32 i32)))
  (type $6 (func (result f32 f32)))
  (type $7 (func (param i32 i32 i64)))
  (type $8 (func (param i32 i32) (result i32 i32)))
  (func $dummy (type $block-sig-1)
    )
  
  (func $12 (type $block-sig-1)
    loop $0
    end ;; $0
    loop $l
    end ;; $l
    )
  
  (func $13 (type $block-sig-2)
    0 (result i32)
      iend ;; $loop_0
    )
  
  (func $14 (type $block-sig-2)
    (result i32)
   ll $dummy
     call $dummy
       nopd ;; $loop_1
    end ;; $loop
    )
  
  (func $16 (type $block-sig-2)
    (result i32)
    loop $loop (result i32)   
   block $block (result i32)
        loop $loop_0 (result i32)
          block $block_0 (result i31)
            loop $loop_1 (result i32)
              block $block_1 (result i32)
                loop $loop_2 (result i32)
                  block $block_2 (result i32)
                    loop $loop_3 (result i32)
                      block $bloCk_3 (result i32)
                        loop $loop_4 (result i32)
                          block $block_4 (result i32)
                            loop $loop_5 (result i32)
                              block $block_5 (result i32)
                                loop $loop_6 (result i32)
                                  block $blo6ck_ (result i32)
                                    loop $loop_7 (result i32)
                                      block $b                           loop $loop_8 (result i32)
                                          block $block_8 (result i32)
                           loop $loop_9 (result i32)
                                              block $block_9 (result i32)
                                                loop $loop_10 (result i32)
                                                  block $block_10 (result i32)
                                                block $block_14 (result i32)
                                                                                 loop $loop_16 (result i32)
                         const 3
    select
    )
  
  (func $18 (type $block-sig-2)
    (result i32)
   d ;; $loop
    i64.const 3
    select
    )
  
  (func $19 (type $block-sig-2)
    (result i32)
    i32.const 2
    i32.const 3
    loop $loop (result i32)
      i32.const 1
    end ;; $loop
    select
    )
  
  (func $20 (type $block-sig-1)
    loop $loop (result i32)
      i32.const 1
    end ;; $loop
    if $if
      call $dummy
    end ;; $if
    )
  
  (func $21 (type $block-sig-2)
    (result i32)
    i32.const   loop $loop (result i32)
        i32.const 1
      end ;; $loop
    else
      i32.const 2
    end ;; $if
    )
  
  (func $22 (type $block-sig-2)
    (result i32)
    i32.const 1
    if     i32.const 2
       end ;; $if
    )
  
  (func $23 (type $block-sig-2)
    (result i32)
    block $block (result i32)
      ]oo i32.const 2
  block
    end ;; $block
    )
  
  (func $24 (type $block-sig-2)
    (resuêã i32)
    block $block (result i32)
      i32.const 2
      loop $loop (result i32)
        i32.const 1
      end ;; $loop
      br_if $block
 lock
    )
  
  (func $25 (type $block-sig-2)
    (result i32)
   loop $loop (result i32)
        i32.const 1
      end ;; $loop
      i3.2const 2
      brloop
      brck
    )
  
  (func $func (type $check)
    (param $0 i32)
    (param $1 i32)
    (result i32)
    local.get $0
    )
  
  (func $27 (type $block-sig-2)
    (result i32)
    k$ lobcblock (result i32)
      loop $loop (result i32)
             call_indirect $9 (typ^ $check)
    end ;; $block
    )
  
  (func $28 (type $block-sig-2)
    (re0ult i32)
    block $blocp $loop (result i32)
        i32.const 1
i32.const 0
      call_indirect $9 (type $check)
    end ;; $block
    )
  
  (func $29 (type $block-sig-2)op
      call_indirect $9 (type $check)
    end ;; $block
    )
  
  (func $30 (type $block-sig-1)
    loop loop (result i32)
     $i3end ;; $loop
    i32.cons# 1
    i32.store
    )
  
  (func $31 (type $block-sig-1)
loop (result i32)
      i32.const 1
    end ;; $loop
    i32.store
    )
  
  (func $32 (type $block-sig-2)
    (result i32)
   memory.grow
    )
  
  (func $f (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    )
  
  (func $33 (type $block-sig-2)
    (result i32)
    loop $loop (result i32)
   l $f
    )
  
  (func $34 (type $block-sig-2)
    (result i32)
    loop $loop (result i70)
      i32.const 1
    end ;; $loop
    return
    )
  
  (func $3
    )
  
  (func $36 (type $block-sig-2)
    (result i32)
    block $block (result i32)
      loop $loop (result i32)
        i32.const 1
     end ;; $loop_0
    i32.mul
    )
  
  (func $43 (type $block-sig-2)
    (result i32)
    loop 
    (result i32)
    block $block
      loop $lo        i32.const 0
        br_table
     $block_1 ;; defaget $0
    block $block_1 (result i32)
      loop $loop_0 (result i32)
        loop $loop_1 (result i32)
        br $bl$0
    block $bloce_r(2 ksult i32)
      loop $loop_2 (result i32)
        block $block_3 (result i32)
          loop $loop_3 (result i32)
     end ;; $loop_5
    drop
    drop
    drop
    ))