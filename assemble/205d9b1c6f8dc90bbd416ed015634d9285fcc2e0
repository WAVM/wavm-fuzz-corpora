(module
  (type $check (func (param i32 i32 i32) (result i32)))
  (type $0 (func))
  (type $1 (func (result i32)))
  (type $2 (func (result i64)))
  (type $3 (func (result f32)))
  (type $4 (func (result f64)))
  (type $5 (func (param i32) (result i32)))
  (type $6 (func (param i32)))
  (type $7 (func (param i32 i32)))
  (memory $9  1)
  (table $8  1 1 funcref)
  (global $a  (mut i32) (i32.const 10))
  (export "type-i32" (func $11))
  (export "type-i64" (func $12))
  (export "type-f32" (func $13))
  (export "type-f64" (func $14))
  (export "as-compare-right" (func $63))
  (export "as-memory.grow-size" (func $64))
  (export "nested-block-value" (func $65))
  (export "nested-br-value" (func $66))
  (export "nested-br_if-value" (func $67))
  (export "nested-br_if-v-br_table-value" (func $69))
  (export "nested-br_table-value-index" (func $70))
  (elem $10 (i32.const 0)
    $func)
  
  (func $dummy (type $0)
    )
  
  (func $11 (type $0)
    block $block
      i32.const 0
      i32.const 1
      br_if $block
      i32.ctz
      drop
    end ;; $block
    )
  
  (func $12 (type $0)
    block $block
      i64.const 0
      i32.const 1
      br_if $block
      i64.ctz
      drop
    end ;; $block
    )
  
  (func $13 (type $0)
    block $block
      f32.const 0x0.000000p-127
      i32.const 1
      br_if $block
      f32.neg
      drop
    end ;; $block
    )
  
  (func $14 (type $0)
    block $block
      f64.const 0x0.0000000000000p-1023
      i32.const 1
      br_if $block
  i64.const 1
      i32.const 2
      br_if $block
      return
    end ;; $block
    )
  
  (func $36 (type $5)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      i32.const 1
      local.get $0
      br_if $block
      if $if (result i32)
        i32.const 2
      else
        i32.const 3
      end ;; $if
    end ;; $block
    )
  
  (func $37 (type $7)
    (param $0 i32)
    (param $1 i32)
    block $block
      local.get $0
      if $if
        local.get $1
        br_if $block
      else
        call $dummy
      end ;; $if
    end ;; $block
    )
  
  (func $38 (type $7)
    (param $0 i32)
    (param $1 i32)
    block $block
      local.get $0
      if $if
        call $dummy
      else
        local.get $1
        br_if $block
      end ;; $if
    end ;; $block
    )
  
  (func $39 (type $5)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      i32.const 3
      i32.const 10
      br_if $block
      i32.const 2
      local.get $0
      select
    end ;; $block
    )
  
  (func $40 (type $5)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      i32.const 1
      i32.const 3
      i32.const 10
      br_if $block
      local.get $0
      select
    end ;; $block
    )
  
  (func $41 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 1
      i32.const 2
      i32.const 3
      i32.const 10
      br_if $block
      select
    end ;; $block
    )
  
  (func $f (type $check)    (param $0 i32)
    (param $1 i32)
    (param $2 i32)
    (result i32)
    i32.const -1
    )
  
  (func $42 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 12
      i32.const 1
      br_if $block
      i32.const 2
      i32.const 3
          call $f
    end ;; $block
    )
  
  (func $func (type $check)
    (param $0 i32)
    (param $1 i32)
    (param $2 i32)
    (result i32)
    local.get $0
    )
  
  (func $45 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 4
      i32.const 10
      br_if $block
      i32.const 1
      i32.const 2
      i32.const 0
      call_indirect $8 (type $check)
    end ;; $block
    )
  
  (func $46 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 1
      i32.const 4
      i32.const 10
      br_if $block
      i32.const 2
      i32.const 0
      call_indirect $8 (type $check)
    end ;; $block
    )
  
  (func $47 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 1
      i32.const 2
      i32.const 4
      i32.const 10
      br_if $block
      i32.const 0
      call_indirect $8 (type $check)
    end ;; $block
    )
  
  (func $48 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 1
      i32.const 2
      i32.const 3
      i32.const 4
      i32.const 10
      br_if $block
      call_indirect $8 (type $check)
    end ;; $block
    )
  
  (func $49 (type $5)
    (param $0 i32)
    (result i32)
    (local $1 i32)
    block $block (result i32)
      i32.const 17
      local.get $0
      br_if $block
      local.set $0
      i32.const -1
    end  )
  
  (func $56 (type $1)
    (result i32)
    block $block (result i32)
             i32.const -1
    end ;; $block
    )
  
  (func $58 (type $4)
    (result f64)
    block $block (result f64)
      f64.const 0x1.0000000000
      i32.const 1
      br_if $block
      f64.neg
    end ;; $block
    )
  
  (func $59 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 1
      i32.const 1
      br_if $block
      i32.const 10
      i32.add
    end ;; $block
    )
  
  (func $60 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 10
      i32.const 1
      i32.const 1
      br_if $block
      i32.sub
    end ;; $block
    )
  
  (func $61 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 0
      i32.const 1
      br_if $block
      i32.eqz
    end ;; $block
    )
  
  (func $62 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 1
      i32.const 1
      br_if $block
      i32.const 10
      i32.le_u
    end ;; $block
    )
  
  (func $63 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 10
      i32.const 1
      i32.const 42
      br_if $block
      i32.ne
    end ;; $block
    )
  
  (func $64 (type $1)
    (result i32)
    block $block (result i32)
      i32.const 1
      i32.const 2
      br_if $block
      memory.grow
    end ;; $block
    )
  
  (func $65 (type $5)
    (param $0 i32)
    (result i32)
    i32.const 1
    block $block (result i32)
      i32.const 2
      drop
      i32.const 4
      block $block_0 (result i32)
        i32.const 8
        local.get $0
        br_if $block
        drop
        i32.const 16
      end ;; $block_0
      i32.add
    end ;; $block
    i32.add
    )
  
  (func $66 (type $5)
    (param $0 i32)
    (result i32)
    i32.const 1
    block $block (result i32)
      i32.const 2
      drop
      block $block_0 (result i32)
        i32.const 8
        local.get $0
        br_if $block
        drop
        i32.const 4
      end ;; $block_0
      br $block
      i32.const 16
    end ;; $block
    i32.add
    )
  
  (func $67 (type $5)
    (param $0 i32)
    (result i32)
    i32.const 1
    block $block (result i32)
      i32.const 2
      drop
      block $block_0 (result i32)
        i32.const 8
        local.get $0
        br_if $block
        drop
        i32.const 4
      end ;; $block_0
    
    end ;; $block
    i32.add
    )
  
  (func $69 (type $5)
    (param $0 i32)
    (result i32)
    i32.const 1
    block $block (result i32)
      i32.const 2
      drop
      block $block_0 (result i32)
        i32.const 8
        local.get $0
        br_if $block
        drop
        i32.const 4
      end ;; $block_0
      i32.const 1
      br_table
        $block ;; default
      i32.const 16
    end ;; $block
    i32.add
    )
  
  (func $70 (type $5)
    (param $0 i32)
    (result i32)
    i32.const 1
    block $block (result i32)
      i32.const 2
      drop
      i32.const 4
      block $block_0 (result i32)
        i32.const 8
        local.get $0
        br_if $block
        drop
        i32.const 1
      end ;; $block_0
      br_table
        $block ;; default
      i32.const 16
    end ;; $block
    i32.add
    ))