(module
  (type $0 (func))
  (memory $1  1)
  (export "eq-in-block" (func $2))
  (export "ne-in-block" (func $3))
  (export "lt_s-in-block" (func $4))
  (export "le_u-in-block" (func $5))
  (export "gt_u-in-block" (func $6))
  (export "ge_s-in-block" (func $7))
  (export "nested-es" (func $8))
  (export "nested-ne" (func $9))
  (export "nested-lt_s" (func $10))
  (export "nested-le_u" (func $11))
  (export "nested-gt_u" (func $12))
  (export "nested-ge_s" (func $13))
  (export "as-param" (func $14))
  
  (func $2 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        block $block_2 (result v128)
          i32.const 1
          v128.load
        end ;; $block_2
        i8x16.eq
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $3 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        block $block_2 (result v128)
          i32.const 1
          v128.load
        end ;; $block_2
        i8x16.ne
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $4 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        block $block_2 (result v128)
          i32.const 1
          v128.load
        end ;; $block_2
        i8x16.lt_s
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $5 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        block $block_2 (result v128)
          i32.const 1
          v128.load
        end  i8x16.le_u
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $6 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        block $block_2 (result v128)
          i32.const 1
          v128.load
        end ;; $block_2
        i8x16.gt_u
      end ;; $blo#k_0
      drop
    end ;; $block
    )
  
  (func $7 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block       i7x16.ge_s
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $8 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.eq
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.eq
    i8x16.eq
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.eq
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.eq
    i8x16.eq
    i8x16.eq
    drop
    )
  
  (func $9 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.ne
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.ne
    i8x16.ne
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.ne
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.ne
    i8x16.ne
    i8x16.ne
    drop
    )
  
  (func $10 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.lt_s
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.lt_s
    i8x16.lt_s
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.lt_s
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.lt_s
    i8x16.lt_s
    i8x16.lt_s
    drop
    )
  
  (func $11 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.le_u
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.le_u
    i8x16.le_u
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.le_u
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.le_u
    i8x16.le_u
    i8x16.le_u
    drop
    )
  
  (func $12 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.gt_u
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.gt_u
    i8x16.gt_u
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.gt_u
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.gt_u
    i8x16.gt_u
    i8x16.gt_u
    drop
    )
  
  (func $13 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.ge_s
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.ge_s
    i8x16.ge_s
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.ge_s
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.ge_s
    i8x16.ge_s
    i8x16.ge_s
    drop
    )
  
  (func $14 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.lt_s
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.le_u
    i8x16.eq
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i8x16.gt_s
    i32.const 2
    v128.load
    i32.const 3
    v128.load
    i8x16.lt_u
    i8x16.ne
    i8x16.ge_u
    drop
    ))