(module
  (type $0 (func))
  (memory $1  1)
  (export "vin-block" (func $4))
  (export "v128.xor-in-block" (func $5))
  (export "v128.bitselect-in-block" (func $6))
  (export "v128.andnot-in-block" (func $7))
  (export "nested-v128.n)(" (func $8))
  (export "nested-v128.and" (func $9))
  (export "nested-v128.or" (func $10))
  (export "nestedsted-v128.andnot" (func $13))
  (export "as-param" (func $14))
  
  (func $2 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        v128.not
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $3 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        block $block_2 (result v128)
          i32.const 1
          v128.load
        end ;; $block_2
        v128.and
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $4 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        block $block_2 (result v128)
          i32.const 1
          v128.load
        end ;; $block_2
        v128.or
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $5 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        block $block_2 (result v128)
          i32.const 1
          v128.load
        end ;; $block_2
        v128.xor
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $6 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        block $block_2 (result v128)
          i32.const 1
          v128.load
        end ;; $block_2
        block $block_3 (result v128) i32.const 2
          v128.load
        end ;; $block_3
        v128.bitselect
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $7 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        block $block_2 (result v128)
          i32.const 1
          v128.load
        end ;; $block_2
        v128.andnot
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $8 (type $0)
    i32.const 0
    v128.load
    v128.not
    v128.not
    v128.not
    drop
    )
  
  (func $9 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.and
    drop
    )
  
  (func $10 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.or
    i32.const 0
    v128.load
    i32.const 1
v128.load
    v128.or
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.or
    v128.or
    v128.or
    drop
    )
  
  (func $11 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.xor
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.xor
    v128.xor
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.xor
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.xor
    v128.xor
    v128.xor
    drop
    )
  
  (func $12 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
  i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    v128.bitselect
    v128.bitselect
    drop
    )
  
  (func $13 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.andnot
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.andnot
    v128.andnot
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.andnot
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.andnot
    v128.andnot
    v128.andnot
    drop
    )
  
  (func $14 (type $0)
    i32.const 0
    v128.load
    v128.not
    i32.const 1
    v128.load
    v128.not
    v128.and
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.andnot
    v128.xor
    v128.or
    drop
    ))