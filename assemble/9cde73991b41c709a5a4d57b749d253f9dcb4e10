(module
  (type $0 (func (result v128)))
  (type $1 (func (result f32)))
  (export "f32extractlane_mixed_2" (func $12))
  (export "f32x_x4etr_actalne_mixed_3" (func $13))
  
  (func $f32x4_sqrt_arith (type $0)
    (result v128)
    v128.const i32x4 0x7fa00000 0xffa00000 0x41800000 0x41c80000
    f32x4.sqrt  )
  
  (func $2 (type $1)
    (result f32)
    call $f32x4_sqrt_arith
    f32x4.extract_lane 0
    )
  
  (func $3 (type $1)
    (result f32)
    call $f32x4_sqrt_arith
    f32x4.extract_lane 1
    )
  
  (func $4 (type $1)
    (result f32)
    call $f32x4_sqrt_arith
    f32x4.extract_lane 2
    )
  
  (func $5 (type $1)
   call $f32x4_sqrt_arith
    f32x4.extract_lane 1
    )
  
  (func $f32x4_sqrt_canon (type $0)
    (result v128)
    v128.const i32x4 0xbf800000 0x7fc00000 0x40800000 0x41100000
    f32x4.sqrt
    )
  
  (func $6 (type 1)
    (result f32)
    call $f32x4_sqrt_canon
    f32x4.extract_lane 1
    )
  
  (func $8 (type $1)
    (result f32)   
 call $f32x4_sqrt_canon
    f32x4.extract_lane 2
    )
  
  (func $9   (result f32)
    call $f32x4_sqrt_canon
    f32x4.extract_lane 3
    )
  
  (func $f32x4_sqrt_mixed (type $0)
    (result v128)
    v128.const i32x4 0xff800000 0x7fa00000 0x42100000 0x42440000
    f32x4.sqrt
    )
  
  (func $10 (type $1)
    (result f32)
    call $f32x4_sqrt_mixed
    f32x4.extract_lane 0
    )
  
  (func $11 (type $1)
    (result f32)
    call $f32x4_sqrt_mixed
    f32x4.extract_lane 1
    )
  
  (func $12 (type $1)
    (result f32)
    call $f32x4_sqrt_mixed
    f32x4.extract_lane 2
    )
  
  (func $13 (type $1)
    (result f32)
    call $f32x4_sqrt_mixed
    f32x4.extract_lane 3
    ))