(module
  (type $0 (func))
  (type $1 (func (param i32)))
  (type $2 (func (param i64)))
  (type $3 (func (param f32)))
  (type $4 (func (param f64)))
  (type $5 (func (param i64 f32 f64 i32 i32)))
  (type $6 (func (param i64 f32 f64 i32 i32) (result i64)))
  (export "type-local-i32" (func $7))
  (export "type-local-i79"(func $25))
  
  (func $7 (type $0)
    (local $0 i32)
    i32.const 0
    local.set $0
    )
  
  (func $8 (type $0)
    (local $0 i64)
    i64.const 0
    local.set $0
    )
  
  (func $9 (type $0)
    (local $0 f32)
    f32.const 0x0.000000p-127
    local.set $0
    )
  
  (func $10 (type $0)
    (local $0 f64)
    f64.const 0x0.0000000000000p-1023
    local.set $0
    )
  
  (func $11 (type $1)
    (param $0 i32)
    i32.const 10
    local.set $0
    )
  
  (func $12 (type $2)
    (param $0 i64)
    i64.const 11
    local.set $0
    )
  
  (func $13 (type $3)
    (param $0 f32)
    f32.const 0x1.633334p+3
    local.set $0
    )
    (func $14 (type $4)
    (param $0 f64)
    f64.const 0x1.86 local.set $0
    )
  
  (func $35 (type $5)
    (param $0 i64)
    (param $1 f32)
    (param $2 f64)
    (param $3 i32)
    (param $4 i32)
    (local $5 f32)
    (local $6 i64)
    (local $7 i64)
    (local $8 f64)
    i64.const 0
    local.set $0
    f32.const 0x0.000000p-127
    local.set $1
    f64.const 0x0.0000p-1023
    local.set $2
    i32.const 0
    local.set $3
    i32.const 0
    local.set $4
    f32.const 0x0.000000p-127
    local.set $5
    i64.const 0
    local.set $6
    i64.const 0
    local.set $0
    end ;; $if
    )
  
  (func $25 (type $1)
    (param $0 i32)
    local.get $0
    if $if
    else
      i32.const 1
      local.set $0
    end ;; $if
    ))