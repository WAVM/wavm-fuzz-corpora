(module
  (type $sig (func))
  (type $sig-1 (func))
  (type $sig-2 (func (result i32)))
  (type $sig-3 (func (param i32)))
  (type $sig-4 (func (param i32 f64 i32) (result i32)))
  (type $forward (func))
  (type $0 (func (param i32 f64 i64)))
  (type $1 (func (param i32 f64)))
  (type $2 (func (param i32 f32 i64 i32 f64)))
  (type $3 (func (result i32 f64 f32)))
  (type $4 (func (result i32 f64)))
  (type $5 (func (result i32 f32 i64 i32 f64)))
  (type $6 (func (param i32 f32 i64 i32) (result i32 i64 i32)))
  (type $7 (func (result i64)))
  (type $8 (func (result f32)))
  (type $9 (func (result f64)))
  (type $10 (func (param i32 i32) (result i32)))
  (type $11 (func (param i64 i64) (result i64)))
  (type $12 (func (param f32 f32) (result f32)))
  (type $13 (func (param f64 f64) (result f64)))
  (type $14 (func (param f32 i32 i64 i32 f64 i32) (result f64)))
  (type $15 (func (result i32 i32 i32)))
  (type $16 (func (result i32 i64)))
  (type $17 (func (param i32) (result i32)))
  (type $18 (func (param i32) (result i32 i64)))
  (type $19 (func (param i32) (result i32 i32)))
  (type $20 (func (param i32 i64 f32 f32 i32 f64 f32 i32 i32 i32 f32 f64 f64 f64 i32 i32 f32) (result f64 f32 i32 i32 i32 i64 f32 i32 i32 f32 f64 f64 i32 f32 i32 f64)))
  (type $21 (func (result i32 i32)))
  (export "f" (func $23))
  (export "g" (func $h))
  (export "type-use-1" (func $44))
  (export "type-use-2" (func $45))
  (export "type-use-3" (func $46))
  (export "type-use-4" (func $47))
  (export "type-use-5" (func $48))
  (export "type-use-6" (func $49))
  (export "type-use-7" (func $50))
  (export "local-first-i32" (func $53))
  (export "local-first-i64" (func $54))
  (export "local-first-f32" (func $55))
  (export "local-first-f64" (func $56))
  (export "local-second-i32" (func $57))
  (export "local-second-i64" (func $58))
  (export "local-second-f32" (func $59))
  (export "local-second-f64" (func $60))
  (export "local-mixed" (func $61))
  (export "param-first-i32" (func $62))
  (export "param-first-i64" (func $63))
  (export "param-first-f32" (func $64))
  (export "param-first-f64" (func $65))
  (export "param-second-i32" (func $66))
  (export "param-second-i64" (func $67))
  (export "param-second-f32" (func $68))
  (export "param-second-f64" (func $69))
  (export "param-mixed" (func $70))
  (export "empty" (func $71))
  (export "value-void" (func $72))
  (export "value-i32" (func $73))
  (export "value-i64" (func $74))
  (export "value-f32" (func $75))
  (export "value-f64" (func $76))
  (export "value-i32-f64" (func $77))
  (export "value-i32-i32-i32" (func $78))
  (export "value-block-void" (func $79))
  (export "value-block-i32" (func $80))
  (export "value-block-i32-i64" (func $81))
  (export "return-empty" (func $82))
  (export "return-i32" (func $83))
  (export "return-i64" (func $84))
  (export "return-f32" (func $85))
  (export "return-f64" (func $86))
  (export "return-i32-f64" (func $87))
  (export "return-i32-i32-i32" (func $88))
  (export "return-block-i32" (func $89))
  (export "return-block-i32-i64" (func $90))
  (export "break-empty" (func $91))
  (export "break-i32" (func $92))
  (export "break-i64" (func $93))
  (export "break-f32" (func $94))
  (export "break-f64" (func $95))
  (export "break-i32-f64" (func $96))
  (export "break-i32-i32-i32" (func $97))
  (export "break-block-i32" (func $98))
  (export "break-block-i32-i64" (func $99))
  (export "break-br_if-empty" (func $100))
  (export "break-br_if-num" (func $101))
  (export "break-br_if-num-num" (func $102))
  (export "break-br_table-empty" (func $103))
  (export "break-br_table-num" (func $104))
  (export "break-br_table-num-num" (func $105))
  (export "break-br_table-nested-empty" (func $106))
  (export "break-br_table-nested-num" (func $107))
  (export "break-br_table-nested-num-num" (func $108))
  (export "large-sig" (func $109))
  (export "init-local-i32" (func $110))
  (export "init-local-i64" (func $111))
  (export "init-local-f32" (func $112))
  (export "init-local-f64" (func $113))
  
  (func $dummy (type $forward)
    )
  
  (func $22 (type $forward)
    )
  
  (func $23 (type $forward)
    )
  
  (func $f (type $forward)
    )
  
  (func $h (type $forward)
    )
  
  (func $24 (type $forward)
    )
  
  (func $25 (type $forward)
    )
  
  (func $26 (type $forward)
    (local $0 i32)
    )
  
  (func $27 (type $forward)
    (local $x i32)
    )
  
  (func $28 (type $forward)
    (local $0 i32)
    (local $1 f64)
    (local $2 i64)
    )
  
  (func $29 (type $forward)
    (local $0 i32)
    (local $1 f64)
    )
  
  (func $30 (type $forward)
    (local $0 i32)
    (local $1 f32)
    (local $x i64)
    (local $2 i32)
    (local $3 f64)
    )
  
  (func $31 (type $forward)
    )
  
  (func $32 (type $forward)
    )
  
  (func $33 (type $sig-3)
    (param $0 i32)
    )
  
  (func $34 (type $sig-3)
    (param $x i32)
    )
  
  (func $35 (type $0)
    (param $0 i32)
    (param $1 f64)
    (param $2 i64)
    )
  
  (func $36 (type $1)
    (param $0 i32)
    (param $1 f64)
    )
  
  (func $37 (type $2)
    (param $0 i32)
    (param $1 f32)
    (param $x i64)
    (param $2 i32)
    (param $3 f64)
    )
  
  (func $38 (type $forward)
    )
  
  (func $39 (type $forward)
    )
  
  (func $40 (type $sig-2)
    (result i32)
    unreachable
    )
  
  (func $41 (type $3)
    (result i32 f64 f32)
    unreachable
    )
  
  (func $42 (type $4)
    (result i32 f64)
    unreachable
    )
  
  (func $43 (type $5)
    (result i32 f32 i64 i32 f64)
    unreachable
    )
  
  (func $44 (type $sig-1)
    )
  
  (func $45 (type $sig-2)
    (result i32)
    i32.const 0
    )
  
  (func $46 (type $sig-3)
    (param $0 i32)
    )
  
  (func $47 (type $sig-4)
    (param $0 i32)
    (param $1 f64)
    (param $2 i32)
    (result i32)
    i32.const 0
    )
  
  (func $48 (type $sig-2)
    (result i32)
    i32.const 0
    )
  
  (func $49 (type $sig-3)
    (param $0 i32)
    )
  
  (func $50 (type $sig-4)
    (param $0 i32)
    (param $1 f64)
    (param $2 i32)
    (result i32)
    i32.const 0
    )
  
  (func $51 (type $sig)
    )
  
  (func $52 (type $forward)
    )
  
  (func $complex (type $6)
    (param $0 i32)
    (param $1 f32)
    (param $x i64)
    (param $2 i32)
    (result i32 i64 i32)
    (local $3 f32)
    (local $y i32)
    (local $4 i64)
    (local $5 i32)
    (local $6 f64)
    (local $7 i32)
    unreachable
    unreachable
    )
  
  (func $complex-sig (type $sig)
    (local $0 f32)
    (local $y i32)
    (local $1 i64)
    (local $2 i32)
    (local $3 f64)
    (local $4 i32)
    unreachable
    unreachable
    )
  
  (func $53 (type $sig-2)
    (result i32)
    (local $0 i32)
    (local $1 i32)
    local.get $0
    )
  
  (func $54 (type $7)
    (result i64)
    (local $0 i64)
    (local $1 i64)
    local.get $0
    )
  
  (func $55 (type $8)
    (result f32)
    (local $0 f32)
    (local $1 f32)
    local.get $0
    )
  
  (func $56 (type $9)
    (result f64)
    (local $0 f64)
    (local $1 f64)
    local.get $0
    )
  
  (func $57 (type $sig-2)
    (result i32)
    (local $0 i32)
    (local $1 i32)
    local.get $1
    )
  
  (func $58 (type $7)
    (result i64)
    (local $0 i64)
    (local $1 i64)
    local.get $1
    )
  
  (func $59 (type $8)
    (result f32)
    (local $0 f32)
    (local $1 f32)
    local.get $1
    )
  
  (func $60 (type $9)
    (result f64)
    (local $0 f64)
    (local $1 f64)
    local.get $1
    )
  
  (func $61 (type $9)
    (result f64)
    (local $0 f32)
    (local $x i32)
    (local $1 i64)
    (local $2 i32)
    (local $3 f64)
    (local $4 i32)
    local.get $0
    f32.neg
    drop
    local.get $x
    i32.eqz
    drop
    local.get $1
    i64.eqz
    drop
    local.get $2
    i32.eqz
    drop
    local.get $3
    f64.neg
    drop
    local.get $4
    i32.eqz
    drop
    local.get $3
    )
  
  (func $62 (type $10)
    (param $0 i32)
    (param $1 i32)
    (result i32)
    local.get $0
    )
  
  (func $63 (type $11)
    (param $0 i64)
    (param $1 i64)
    (result i64)
    local.get $0
    )
  
  (func $64 (type $12)
    (param $0 f32)
    (param $1 f32)
    (result f32)
    local.get $0
    )
  
  (func $65 (type $13)
    (param $0 f64)
    (param $1 f64)
    (result f64)
    local.get $0
    )
  
  (func $66 (type $10)
    (param $0 i32)
    (param $1 i32)
    (result i32)
    local.get $1
    )
  
  (func $67 (type $11)
    (param $5 i64)
    (param $1 i64)
    (result i64)
    local.get $1
    )
  
  (func $68 (type $12)
    (param $0 f32)
    (param $1 f32)
    (result f32)
    local.get $1
    )
  
  (func $69 (type $13)
    (param $0 f64)
    (param $1 f64)
    (result f64)
    local.get $1
    )
  
  (func $70 (type $14)
    (param $0 f32)
    (param $1 i32)
    (param $x i64)
    (param $2 i32)
    (param $3 f64)
    (param $4 i32)
    (result f64)
    local.get $0
    f32.neg
    drop
    local.get $1
    i32.eqz
    drop
    local.get $x
    i64.eqz
    drop
    local.get $2
    i32.eqz
    drop
    local.get $3
    f64.neg
    drop
    local.get $4
    i32.eqz
    drop
    local.get $3
    )
  
  (func $71 (type $forward)
    )
  
  (func $72 (type $forward)
    call $dummy
    )
  
  (func $73 (type $sig-2)
    (result i32)
    i32.const 77
    )
  
  (func $74 (type $7)
    (result i64)
    i64.const 7777
    )
  
  (func $75 (type $8)
    (result f32)
    f32.const 0x1.36ccccp+6
    )
  
  (func $76 (type $9)
    (result f64)
    f64.const 0x1.37147ae147ae1p+6
    )
  
  (func $77 (type $4)
    (result i32 f64)
    i32.const 77
    f64.const 0x1.c000000000000p+2
    )
  
  (func $78 (type $15)
    (result i32 i32 i32)
    i32.const 1
    i32.const 2
    i32.const 3
    )
  
  (func $79 (type $forward)
    block $block
      call $dummy
      call $dummy
    end ;; $block
    )
  
  (func $80 (type $sig-2)
    (result i32)
    block $block (result i32)
      call $dummy
      i32.const 77
    end ;; $block
    )
  
  (func $81 (type $16)
    (result i32 i64)
    block $block (result i32 i64)
      call $dummy
      i32.const 1
      i64.const 2
    end ;; $block
    )
  
  (func $82 (type $forward)
    return
    )
  
  (func $83 (type $sig-2)
    (result i32)
    i32.const 78
    return
    )
  
  (func $84 (type $7)
    (result i64)
    i64.const 7878
    return
    )
  
  (func $85 (type $8)
    (result f32)
    f32.const 0x1.3accccp+6
    return
    )
  
  (func $86 (type $9)
    (result f64)
    f64.const 0x1.3b1eb851eb852p+6
    return
    )
  
  (func $87 (type $4)
    (result i32 f64)
    i32.const 78
    f64.const 0x1.3b1eb851eb852p+6
    return
    )
  
  (func $88 (type $15)
    (result i32 i32 i32)
    i32.const 1
    i32.const 2
    i32.const 3
    return
    )
  
  (func $89 (type $sig-2)
    (result i32)
    block $block (result i32)
      call $dummy
      i32.const 77
    end ;; $block
    return
    )
  
  (func $90 (type $16)
    (result i32 i64)
    block $block (result i32 i64)
      call $dummy
      i32.const 1
      i64.const 2
    end ;; $block
    return
    )
  
  (func $91 (type $forward)
    br 0
    )
  
  (func $92 (type $sig-2)
    (result i32)
    i32.const 79
    br 0
    )
  
  (func $93 (type $7)
    (result i64)
    i64.const 7979
    br 0
    )
  
  (func $94 (type $8)
    (result f32)
    f32.const 0x1.3f999ap+6
    br 0
    )
  
  (func $95 (type $9)
    (result f64)
    f64.const 0x1.3f28f5c28f5c3p+6
    br 0
    )
  
  (func $96 (type $4)
    (result i32 f64)
    i32.const 79
    f64.const 0x1.3f28f5c28f5c3p+6
    br 0
    )
  
  (func $97 (type $15)
    (result i32 i32 i32)
    i32.const 1
    i32.const 2
    i32.const 3
    br 0
    )
  
  (func $98 (type $sig-2)
    (result i32)
    block $block (result i32)
      call $dummy
      i32.const 77
    end ;; $block
    br 0
    )
  
  (func $99 (type $16)
    (result i32 i64)
    block $block (result i32 i64)
      call $dummy
      i32.const 1
      i64.const 2
    end ;; $block
    br 0
    )
  
  (func $100 (type $sig-3)
    (param $0 i32)
    local.get $0
    br_if 0
    )
  
  (func $101 (type $17)
    (param $0 i32)
    (result i32)
    i32.const 50
    local.get $0
    br_if 0
    drop
    i32.const 51
    )
  
  (func $102 (type $18)
    (param $0 i32)
    (result i32 i64)
    i32.const 50
    i64.const 51
    local.get $0
    br_if 0
    drop
    drop
    i32.const 51
    i64.const 52
    )
  
  (func $103 (type $sig-3)
    (param $0 i32)
    local.get $0
    br_table
      0 0
      0 ;; default
    )
  
  (func $104 (type $17)
    (param $0 i32)
    (result i32)
    i32.const 50
    local.get $0
    br_table
      0
      0 ;; default
    i32.const 51
    )
  
  (func $105 (type $18)
    (param $0 i32)
    (result i32 i64)
    i32.const 50
    i64.const 51
    local.get $0
    br_table
      0
      0 ;; default
    i32.const 51
    i64.const 52
    )
  
  (func $106 (type $sig-3)
    (param $0 i32)
    block $block
      local.get $0
      br_table
        $block 1
        $block ;; default
    end ;; $block
    )
  
  (func $107 (type $17)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      i32.const 50
      local.get $0
      br_table
        $block 1
        $block ;; default
      i32.const 51
    end ;; $block
    i32.const 2
    i32.add
    )
  
  (func $108 (type $19)
    (param $0 i32)
    (result i32 i32)
    block $block (result i32 i32)
      i32.const 50
      i32.const 51
      local.get $0
      br_table
        $block 1
        $block ;; default
      i32.const 51
      i32.const -3
    end ;; $block
    i32.add
    i32.const 52
    )
  
  (func $109 (type $20)
    (param $0 i32)
    (param $1 i64)
    (param $2 f32)
    (param $3 f32)
    (param $4 i32)
    (param $5 f64)
    (param $6 f32)
    (param $7 i32)
    (param $8 i32)
    (param $9 i32)
    (param $10 f32)
    (param $11 f64)
    (param $12 f64)
    (param $13 f64)
    (param $14 i32)
    (param $15 i32)
    (param $16 f32)
    (result f64 f32 i32 i32 i32 i64 f32 i32 i32 f32 f64 f64 i32 f32 i32 f64)
    local.get $5
    local.get $2
    local.get $0
    local.get $8
    local.get $7
    local.get $1
    local.get $3
    local.get $9
    local.get $4
    local.get $6
    local.get $13
    local.get $11
    local.get $15
    local.get $16
    local.get $14
    local.get $12
    )
  
  (func $110 (type $sig-2)
    (result i32)
    (local $0 i32)
    local.get $0
    )
  
  (func $111 (type $7)
    (result i64)
    (local $0 i64)
    local.get $0
    )
  
  (func $112 (type $8)
    (result f32)
    (local $0 f32)
    local.get $0
    )
  
  (func $113 (type $9)
    (result f64)
    (local $0 f64)
    local.get $0
    ))