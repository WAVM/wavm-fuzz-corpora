(module
  (type $0 (func (param funcref f32 f32)))
  (type $1 (func (param externref funcref funcref externref) (result f32)))
  (type $2 (func (param i64 i64) (result f32)))
  (type $3 (func (param v128 i64 i64 i32) (result funcref f64)))
  (type $4 (func (param externref f64 i64)))
  (type $5 (func (param funcref) (result v128 externref f32 v128)))
  (type $6 (func (result i32 f64)))
  (type $7 (func (result f32 f32)))
  (type $8 (func (result i64 f32 funcref)))
  (import "env" "table" (table $9 76 4294967295 shared externref))
  (import "env" "table" (table $10 62 4294967295 externref))
  (import "env" "global1" (global $13 (mut v128)))
  (import "env" "global3" (global $14 externref))
  (import "env" "global5" (global $15 (mut i64)))
  (import "env" "func0" (func $22 (param externref f64 i64)))
  (memory $11  98 45325 shared)
  (memory $12  81 38455)
  (global $16  (mut i32) (i32.const 621601))
  (global $17  funcref (ref.null func))
  (global $18  (mut f32) (f32.const 0x1.e6d5d4p+30))
  (global $19  (mut i32) (i32.const 310928533))
  (global $20  v128 (v128.const i32x4 0x39927914 0x11d8c055 0x58eb0a92 0x09383824))
  (global $21  v128 (v128.const i32x4 0xdb7b3ce1 0x26fc6066 0x8bab01c7 0x6bede1c0))
  
  (func $23 (type $0)
    (param $0 funcref)
    (param $1 f32)
    (param $2 f32)
    global.get $16
    f64.const -0x1.557451d7a36e4p+734
    i64.reinterpret_f64
    i64.atomic.rmw16.add_u $12 offset=543673610
    br 0
    )
  
  (func $24 (type $1)
    (param $0 externref)
    (param $1 funcref)
    (param $2 funcref)
    (param $3 externref)
    (result f32)
    (local $4 f32)
    (local $5 f64)
    (local $6 f64)
    local.get $0
    local.get $2
    global.get $14
    local.get $0
    global.get $17
    nop
    memory.size $12
    if $if (param funcref) (result v128 externref f32 v128)
      loop $loop (result i32 f64)
        global.get $16
        table.size $10
        i32.atomic.rmw8.and_u offset=2451255920
        global.get $21
        local.get $0
        block $block (result f32 f32)
          atomic.fence
          memory.size
          global.set $19
          local.get $0
          local.set $0
          table.size $10
          ref.null func
          ref.null func
          local.set $1
          local.set $2
          global.set $19
          global.get $19
          br_if $loop
          local.get $0
          drop
          v128.const i32x4 0xa843ab6f 0xdfac6acd 0xbe014425 0x74bad05c
          unreachable
        end ;; $block
        global.set $18
        return
      end ;; $loop
      local.set $6
      table.get $10
      local.set $0
      unreachable
    else
      drop
      local.get $5
      drop
      ref.null extern
      drop
      local.get $1
      unreachable
    end ;; $if
    ref.null extern
    ref.null extern
    drop
    ref.null extern
    local.set $3
    local.set $0
    unreachable
    )
  
  (func $25 (type $2)
    (param $0 i64)
    (param $1 i64)
    (result f32)
    (local $2 i64)
    (local $3 f32)
    memory.size
    global.get $16
    i64.load32_u $12 offset=3912778010 align=1
    i64.atomic.rmw.xor $12 offset=37283686
    f64.reinterpret_i64
    i64.trunc_f64_s
    nop
    global.get $18
    i64.trunc_sat_f32_u
    i64.mul
    local.set $1
    global.get $14
    f32.const -0x1.de9810p-26
    local.get $1
    unreachable
    )
  
  (func $26 (type $3)
    (param $0 v128)
    (param $1 i64)
    (param $2 i64)
    (param $3 i32)
    (result funcref f64)
    (local $4 f32)
    global.get $13
    global.get $18
    f32.ceil
    i32.trunc_sat_f32_s
    local.get $1
    i64.atomic.rmw16.add_u offset=548274965
    block $block (result i64 f32 funcref)
      global.get $20
      memory.size
      i64x2.load32x2_u $12 offset=243924278 align=4
      f32x4.ne
      table.size $10
      i32.load offset=832885913 align=2
      i64.load8_s $12 offset=2627127647
      local.tee $1
      local.set $2
      drop
      f64.const 0x1.2685ed231541ap-820
      ref.null extern
      drop
      ref.null func
      ref.null extern
      unreachable
    end ;; $block
    drop
    unreachable
    ))