(module
  (type $0 (func (result i32)))
  (type $1 (func (result i64)))
  (type $2 (func (result f32)))
  (type $3 (func (result f64)))
  (export "f32.nan" (func $4))
  (export "f32.positive_nan" (func $5))
  (export "f32.negative_nan" (func $6))
  (export "f32.plain_nan" (func $7))
  (export "f32.informally_known_as_plain_snan" (func $8))
  (export "f32.all_ones_nan" (func $9))
  (export "f32.misc_nan" (func $10))
  (export "f32.misc_positive_nan" (func $11))
  (export "f32.misc_negative_nan" (func $12))
  (export "f32.infinity" (func $13))
  (export "f32.positive_infinity" (func $14))
  (export "f32.negative_inftiniy" (func $15))
  (export "f32.zero" (func $16))
  (export "f32.positive_zero" (func $17))
  (export "f32.negative_zero" (func $18))
  (export "f32.misc" (func $19))
  (export "f32.min_positive" (func $20))
  (export "f32ep4" (func $84))
  (export "f64-hex-sep5" (func $85))
  
  (func $4 (type $0)
    (result i32)
    f32.const +nan:0x400000
    i32.reinterpret_f32
    )
  
  (func $5 (type $0)
    (result i32)
    f32.const +nan:0x400000
    i32.reinterpret_f32
    )
  
  (func $6 (type $0)
    (result i32)
    f32.const -nan:0x400000
    i32.reinterpret_f32
    )
  
  (func $7 (type $0)
    (result i32)
    f32.const +nan:0x400000
    i32.reinterpret_f32
    )
  
  (func $8 (type $0)
    (result i32)
    f32.const +nan:0x200000
    i32.reinterpret_f32
    )
  
  (func $9 (type $0)
    (result i32)
    f32.const -nan:0x7fffff
    i32.reinterpret_f32
    )
  
  (func $10 (type $0)
    (result i32)
    f32.const +nan:0x012345
    i32.reinterpret_f32
    )
  
  (func $11 (type $0)
    (result i32)
    f32.const +nan:0x304050
    i32.reinterpret_f32
    )
  
  (func $12 (type $0)
    (result i32)
    f32.const -nan:0x2abcde
    i32.reinterpret_f32
    )
  
  (func $13 (type $0)
    (result i32)
    f32.const +inf
    i32.reinterpret_f32
    )
  
  (func $14 (type $0)
    (result i32)
    f32.const +inf
    i32.reinterpret_f32
    )
  
  (func $15 (type $0)
    (result i32)
    f32.const -inf
    i32.reinterpret_f32
    )
  
  (func $16 (type $0)
    (result i32)
    f32.const 0x0.000000p-127
    i32.reinterpret_f32
    )
  
  (func $17 (type $0)
    (result i32)
    f32.const 0x0.000000p-127
    i32.reinterpret_f32
    )
  
  (func $18 (type $0)
    (result i32)
    f32.const -0x0.000000p-127
    i32.reinterpret_f32
    )
  
  (func $19 (type $0)
    (result i32)
    f32.const 0x1.921fb6p+2
    i32.reinterpret_f32
    )
  
  (func $20 (type $0)
    (result i32)
    f32.const 0x0.000004p-127
    i32.reinterpret_f32
    )
  
  (func $21 (type $0)
    (result i32)
    f32.const 0x1.000000p-126
    i32.reinterpret_f32
    )
  
  (func $22 (type $0)
    (result i32)
    f32.const 0x1.fffffep+127
    i32.reinterpret_f32
    )
  
  (func $23 (type $0)
    (result i32)
    f32.const 0x1.fffffcp-127
    i32.reinterpret_f32
    )
  
  (func $24 (type $0)
    (result i32)
    f32.const 0x1.000000p+10
    i32.reinterpret_f32
    )
  
  (func $25 (type $0)
    (result i32)
    f32.const 0x0.000000p-127
    i32.reinterpret_f32
    )
  
  (func $26 (type $0)
    (result i32)
    f32.const 0x0.000000p-127
    i32.reinterpret_f32
    )
  
  (func $27 (type $0)
    (result i32)
    f32.const -0x0.000000p-127
    i32.reinterpret_f32
    )
  
  (func $28 (type $0)
    (result i32)
    f32.const 0x1.921fb6p+2
    i32.reinterpret_f32
    )
  
  (func $29 (type $0)
    (result i32)
    f32.const 0x0.000004p-127
    i32.reinterpret_f32
    )
  
  (func $30 (type $0)
    (result i32)
    f32.const 0x1.000000p-126
    i32.reinterpret_f32
    )
  
  (func $31 (type $0)
    (result i32)
    f32.const 0x1.fffffcp-127
    i32.reinterpret_f32
    )
  
  (func $32 (type $0)
    (result i32)
    f32.const 0x1.fffffep+127
    i32.reinterpret_f32
    )
  
  (func $33 (type $0)
    (result i32)
    f32.const 0x1.2a05f2p+33
    i32.reinterpret_f32
    )
  
  (func $34 (type $0)
    (result i32)
    f32.const 0x1.000002p-0
    i32.reinterpret_f32
    )
  
  (func $35 (type $1)
    (result i64)
    f64.const +nan:0x8000000000000
    i64.reinterpret_f64
    )
  
  (func $36 (type $1)
    (result i64)
    f64.const +nan:0x8000000000000
    i64.reinterpret_f64
    )
  
  (func $37 (type $1)
    (result i64)
    f64.const -nan:0x8000000000000
    i64.reinterpret_f64
    )
  
  (func $38 (type $1)
    (result i64)
    f64.const +nan:0x8000000000000
    i64.reinterpret_f64
    )
  
  (func $39 (type $1)
    (result i64)
    f64.const +nan:0x4000000000000
    i64.reinterpret_f64
    )
  
  (func $40 (type $1)
    (result i64)
    f64.const -nan:0xfffffffffffff
    i64.reinterpret_f64
    )
  
  (func $41 (type $1)
    (result i64)
    f64.const +nan:0x0123456789abc
    i64.reinterpret_f64
    )
  
  (func $42 (type $1)
    (result i64)
    f64.const +nan:0x3040506070809
    i64.reinterpret_f64
    )
  
  (func $43 (type $1)
    (result i64)
    f64.const -nan:0x2abcdef012345
    i64.reinterpret_f64
    )
  
  (func $44 (type $1)
    (result i64)
    f64.const +inf
    i64.reinterpret_f64
    )
  
  (func $45 (type $1)
    (result i64)
    f64.const +inf
    i64.reinterpret_f64
    )
  
  (func $46 (type $1)
    (result i64)
    f64.const -inf
    i64.reinterpret_f64
    )
  
  (func $47 (type $1)
    (result i64)
    f64.const 0x0.0000000000000p-1023
    i64.reinterpret_f64
    )
  
  (func $48 (type $1)
    (result i64)
    f64.const 0x0.0000000000000p-1023
    i64.reinterpret_f64
    )
  
  (func $49 (type $1)
    (result i64)
    f64.const -0x0.0000000000000p-1023
    i64.reinterpret_f64
    )
  
  (func $50 (type $1)
    (result i64)
    f64.const 0x1.921fb54442d18p+2
    i64.reinterpret_f64
    )
  
  (func $51 (type $1)
    (result i64)
    f64.const 0x0.0000000000002p-1023
    i64.reinterpret_f64
    )
  
  (func $52 (type $1)
    (result i64)
    f64.const 0x1.0000000000000p-1022
    i64.reinterpret_f64
    )
  
  (func $53 (type $1)
    (result i64)
    f64.const 0x1.ffffffffffffep-1023
    i64.reinterpret_f64
    )
  
  (func $54 (type $1)
    (result i64)
    f64.const 0x1.fffffffffffffp+1023
    i64.reinterpret_f64
    )
  
  (func $55 (type $1)
    (result i64)
    f64.const 0x1.0000000000000p+100
    i64.reinterpret_f64
    )
  
  (func $56 (type $1)
    (result i64)
    f64.const 0x0.0000000000000p-1023
    i64.reinterpret_f64
    )
  
  (func $57 (type $1)
    (result i64)
    f64.const 0x0.0000000000000p-1023
    i64.reinterpret_f64
    )
  
  (func $58 (type $1)
    (result i64)
    f64.const -0x0.0000000000000p-1023
    i64.reinterpret_f64
    )
  
  (func $59 (type $1)
    (result i64)
    f64.const 0x1.921fb54442d18p+2
    i64.reinterpret_f64
    )
  
  (func $60 (type $1)
    (result i64)
    f64.const 0x0.0000000000002p-1023
    i64.reinterpret_f64
    )
  
  (func $61 (type $1)
    (result i64)
    f64.const 0x1.00000
    i64.reinterpret_f64
    )
  
  (func $62 (type $1)
    (result i64)
    f64.const 0x1.ffffffffffffep-1023
    i64.reinterpret_f64
    )
  
  (func $63 (type $1)
    (result i64)
    f64.const 0x1.fffffffffffffp+1023
    i64.reinterpret_f64
    )
  
  (func $64 (type $1)
    (result i64)
    f64.const 0x1.249ad2594c37dp+332
    i64.reinterpret_f64
    )
  
  (func $65 (type $1)
    (result i64)
    f64.const 0x1.000001ff19e24p-0
    i64.reinterpret_f64
    )
  
  (func $66 (type $2)
    (result f32)
    f32.const 0x1.e84800p+19
    )
  
  (func $67 (type $2)
    (result f32)
    f32.const 0x1.f40000p+9
    )
  
  (func $68 (type $2)
    (result f32)
    f32.const 0x1.f59220p+9
    )
  
  (func $69 (type $2)
    (result f32)
    f32.const 0x1.c2332cp+49
    )
  
  (func $70 (type $2)
    (result f32)
    f32.const 0x1.3b5ce8p+93
    )
  
  (func $71 (type $2)
    (result f32)
    f32.const 0x1.41e014p+27
    )
  
  (func $72 (type $2)
    (result f32)
    f32.const 0x1.aa0f00p+16
    )
  
  (func $73 (type $2)
    (result f32)
    f32.const 0x1.41ffe2p+15
    )
  
  (func $74 (type $2)
    (result f32)
    f32.const 0x1.e00000p+20
    )
  
  (func $75 (type $2)
    (result f32)
    f32.const 0x1.578050p+44
    )
  
  (func $76 (type $3)
    (result f64)
    f64.const 0x1.e848000000000p+19
    )
  
  (func $77 (type $3)
    (result f64)
    f64.const 0x1.f400000000000p+9
    )
  
  (func $78 (type $3)
    (result f64)
    f64.const 0x1.f5921fafc8b00p+9
    )
  
  (func $79 (type $3)
    (result f64)
    f64.const 0x1.05c735bb8cc45p-402
    )
  
  (func $80 (type $3)
    (result f64)
    f64.const 0x1.3b5ce725bde9cp+93
    )
  
  (func $81 (type $3)
    (result f64)
    f64.const 0x1.5e01e00013332p+51
    )
  
  (func $82 (type $3)
    (result f64)
    f64.const 0x1.aa0f000000000p+16
    )
  
  (func $83 (type $3)
    (result f64)
    f64.const 0x1.41ffe2834b340p+15
    )
  
  (func $84 (type $3)
    (result f64)
    f64.const 0x1.e000000000000p+20
    )
  
  (func $85 (type $3)
    (result f64)
    f64.const 0x1.578050f9f7000p+44
    ))