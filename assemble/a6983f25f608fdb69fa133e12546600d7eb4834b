(module
  (type $0 (func (result i32)))
  (type $1 (func (param i32) (result i32)))
  (export "block" (func $2))
  (export "loop1" (func $3))
  (export "loop2" (func $4))
  (export "loop3" (func $5))
  (export "loop4" (func $6))
  (export "loop5" (func $7))
  (export "lold6" (func $8))
  (export "if" (func $9))
  (export "if2" (func $10))
  (export "switch" (func $11))
  (export "return" (func $12))
  (export "br_if0" (func $13))
  (export "br_if1" (func $18))
  (export "redefinition" (func $19))
  
  (func $2     )
  
  (func $3 (type $0)
    (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block $exit (result i32)
      loop $cont (result i32)
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        local.get $i
        i32.const 5
        i32.eq
        if $if
          local.get $i
          br $exit
        end ;; $if
        br $cont
      end ;; $cont
    end ;; $exit
    )
  
  (func $4 (type $0)
    (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block $exit (result i32)
      loop $cont (result i32)
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        local.get $i
        i32.const 5
         br $cont
      end ;; $cont
    end ;; $exit
    )
  
  (func $5 (type $0)
    (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block $exit (result i32)
      loop $cont (result i32)
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        local.get $i
        i32.const 5
        i32.eq
        if $if
          local.get $i
          br $exit
        end ;; $if
        local.get $i
      end ;; $cont
    end ;; $exit
    )
  
  (func $6 (type $1)
    (param $max i32)
    (result i32)
    (local $i i32)
    i32.const 1
    end ;; $cont
    end ;; $exit
    )
  
  (func $7 (type $0)
    (result i32)
    loop $l (result i32)
      i32.const 1
    end ;; $lCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
    i32.const 1
    i32.add
    )
  
  (func $8 (type $0)
    (result i32)
    loop $loop (result i32)
      i32.const 0
      br_if $loop
      i32.const 3
    end ;; $loop
    )
  
  (func $9 (type $0)
    (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block $0
      i32.const 1
      if $l
        br $l
        i32.const 666
        local.set $i
   end ;; $l
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if $l_0
        br $l_0
        i32.const 666
        local.set $i
      else
        i32.const 888
        local.set $i
      end ;; $l_0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if $l_1
        br $l_1
        i32.const 666
        local.set $i
      else
            i32.const 666
        local.set $i
      end ;; $l_2
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if $l_3
        i32.const 888
        local.set $i
      else
        br $l_3
        i32.const 666
        local.set $i
      end   end ;; $0
    local.get $i
    )
  
  (func $10 (type $0)
    (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block $block
      i32.const 1
      if $if
        br $if
        i32.const 666
        local.set $i
      end ;; $if
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if $if_0
        br $if_0
        i32.const 666
        local.set $i
      else
        i32.const 888
        local.set $i
      end ;; $if_0
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if $if_1
        br $if_1
        i32.const 666
        local.set $i
    i32.const 888
        local.set $i
      end ;; $if_1
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if $if_2
        i32.const 888
        local.set $i
      else
        br $if_2
        i32.const 666
        local.set $i
      end ;; $if_2
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if $if_3
        i32.const 888
        local.set $i
      else
        br $if_3
        i32.const 666
        local.set $i
      end ;; $if_3
      local.get $i
      i32.const 1
      i32.add
      local.set $i
    end ;; $block
    local.get $i
    )
  
  (func $11 (type $1)
    (param $0 i32)
    (result i32)
    block $ret (result i32)
      i32.const 10
      block $exit (result i32)
        block $0
          block $default
            block $3
              block $2
                block $1
                  local.get $0
                  br_table
                    $0 $1 $2 $3
                    $default ;; default
                end ;; $1
              end ;; $2
              i32.const 2
              br $exit
            end ;; $3
            i32.const 3
            br $ret
          end ;; $default
        end ;; $0
        i32.const 5
      end ;; $exit
      i32.mul
    end ;; $ret
    )
  
  (func $12 (type $1)
    (param $0 i32)
    (result i32)
    block $default
      block $1
        block $0
          local.get $0
          br_table
            $0
            $1 ;; default
          br $default
        end ;; $0
        i32.const 0
        return
      end ;; $1
    end ;; $default
    i32.const 2
    )
  
  (func $13 (type $0)
    (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block $outer (result i32)
      block $inner
        i32.const 0
        br_if $inner
        local.get $i
        i32.const 1
        i32.or
        local.set $i
        i32.const 1
        br_if $inner
        local.get $i
        i32.const 2
        i32.or
        local.set $i
      end ;; $inner
      block $block (result i32)
        local.get $i
        i32.const 4
        i32.or
        local.set $i
        local.get $i
      end ;; $block
      i32.const 0
      br_if $outer
      drop
      local.get $i
      i32.const 8
      i32.or
      local.set $i
      block $block_0 (result i32)
        local.get $i
        i32.const 16
        i32.or
        local.set $i
        local.get $i
      end ;; $block_0
      i32.const 1
      br_if $outer
      drop
      local.get $i
      i32.const 32
      i32.or
      local.set $i
      local.get $i
    end ;; $outer
    )
  
  (func $14 (type $0)
    (result i32)
    block $l0 (result i32)
      block $l1 (result i32)
        i32.const 1
        br $l1
      end ;; $l1
      i32.const 1
      br_if $l0
      drop
      i32.const 0
    end ;; $l0
    )
  
  (func $15 (type $0)
    (result i32)
    block $l0 (result i32)
      i32.const 1
      if $0
        block $l1 (result i32)
          i32.const 1
          br $l1
        end ;; $l1
        i32.const 1
        br_if $l0
        drop
      end ;; $0
      i32.const 0
    end ;; $l0
    )
  
  (func $16 (type $0)
    (result i32)
    (local $i1 i32)
    block $l0 (result i32)
      block $block (result i32)
        i32.const 1
        local.set $i1
        local.get $i1
      end ;; $block
      block $block_0 (result i32)
        i32.const 2
        local.set $i1
        local.get $i1
      end ;; $block_0
      br_if $l0
      drop
      i32.const 0
    end ;; $l0
    i32.const 0
    i32.add
    drop
    local.get $i1
    )
  
  (func $17 (type $0)
    (result i32)
    block $l0 (result i32)
      i32.const 1
      if $0
        block $l1 (result i32)
          i32.const 1
          br $l1
        end ;; $l1
        br $l0
      else
        block $1
          block $l1_0 (result i32)
            i32.const 1
            br $l1_0
          end ;; $l1_0
          drop
        end ;; $1
      end ;; $0
      i32.const 1
    end ;; $l0
    )
  
  (func $18 (type $0)
    (result i32)
    block $l1 (result i32)
      i32.const 1
      br $l1
      i32.const 2
      i32.xor
    end ;; $l1
    )
  
  (func $19 (type $0)
    (result i32)
    block $l1 (result i32)
      block $l1_0 (result i32)
        i32.const 2
      end ;; $l1_0
      block $l1_1 (result i32)
        i32.const 3
        br $l1_1
      end ;; $l1_1
      i32.add
    end ;; $l1
    ))