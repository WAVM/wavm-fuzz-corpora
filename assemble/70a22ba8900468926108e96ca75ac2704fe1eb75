(module
  (type $0 (func (param i32) (result i32)))
  (memory $1  1)
  (export "i8x16.bitmask" (func $2))
  (export "i16x8.bitmask" (func $3))
  (export "i32x4.bitmask" (func $4))
  (export "emulated i8x16.bitmask" (func $5))
  
  (func $2 (type $0)
    (param $numIterations i32)
    (result i32)
    (local $i i32)
    (local $result i32)
    loop $loop
      local.get $result
      i32.const 0
      v128.load
      i8x16.bitmask
      i32.xor
      local.set $result
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      local.get $i
      local.get $numIterations
      i32.lt_u
      br_if $loop
    end ;; $loop
    local.get $result
    )
  
  (func $3 (type $0)
    (param $numIterations i32)
    (result i32)
    (local $i i32)
    (local $result i32)
    loop $loop
      local.get $result
      i32.const 0
      v128.load
      i16x8.bitmask
      i32.xor
      local.set $result
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      local.get $i
      local.get $numIterations
      i32.lt_u
      br_if $loop
    end ;; $loop
    local.get $result
    )
  
  (func $4 (type $0)
    (param $numIterations i32)
    (result i32)
    (local $i i32)
    (local $result i32)
    loop $loop
      local.get $result
      i32.const 0
      v128.load
      i32x4.bitmask
      i32.xor
      local.set $result
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      local.get $i
      local.get $numIterations
      i32.lt_u
      br_if $loop
    end ;; $loop
    local.get $result
    )
  
  (func $5 (type $0)
    (param $numIterations i32)
    (result i32)
    (local $i i32)
    (local $x v128)
    (local $m8 v128)
    (local $m4 v128)
    (local $m2 v128)
    (local $m1 v128)
    (local $result i32)
    loop $loop
      i32.const 0
      v128.load
      local.set $x
      local.get $x
      v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000
      i8x16.lt_s
      i64.const -9205322385119247871
      i64x2.splat
      v128.and
      local.set $m8
      local.get $m8
      local.get $m8
      i32.const 32
      i64x2.shr_u
      v128.or
      local.set $m4
      local.get $m4
      local.get $m4
      i32.const 16
      i64x2.shr_u
      v128.or
      local.set $m2
      local.get $m2
      local.get $m2
      i32.const 8
      i64x2.shr_u
      v128.or
      local.set $m1
      local.get $result
      local.get $m1
      i32x4.extract_lane 0
      i32.const 255
      i32.and
      local.get $m1
      i32x4.extract_lane 2
      i32.const 255
      i32.and
      i32.const 8
      i32.shl
      i32.or
      i32.xor
      local.set $result
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      local.get $i
      local.get $numIterations
      i32.lt_u
      br_if $loop
    end ;; $loop
    local.get $result
    ))