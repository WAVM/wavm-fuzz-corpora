(module
  (type $0 (func (param f64 externref externref v128) (result i64 i32)))
  (type $1 (func (param f64 i32 i32 i64)))
  (type $2 (func (param f64 i64)))
  (import "env" "table" (table $3 50 4294967295 shared funcref))
  (import "env" "global1" (global $4 (mut i32)))
  (import "env" "global2" (global $5 (mut v128)))
  (import "env" "global5" (global $6 (mut funcref)))
  (import "env" "global6" (global $7 (mut v128)))
  (import "env" "func0" (func $14 (param f64 i32 i32 i64)))
  (global $8  externref (ref.null extern))
  (global $9  (mut f32) (f32.const 0x1.426280p+28))
  (global $10  (mut externref) (ref.null extern))
  (global $11  i32 (i32.const 1182215709))
  (global $12  f64 (f64.const 0x1.e7af8fd3c3369p+57))
  
  (func $15 (type $0)
    (param $0 f64)
    (param $1 externref)
    (param $2 externref)
    (param $3 v128)
    (result i64 i32)
    (local $4 f64)
    (local $5 i64)
    local.get $0
    i32.trunc_f64_u
    table.size $3
    i32.extend16_s
    i32.eqz
    local.get $0
    i32.const -415635232
    global.get $5
    local.tee $3
    global.get $7
    i32x4.trunc_sat_f32x4_u
    i8x16.max_u
    i32x4.neg
    global.get $12
    global.get $4
    global.set $4
    f64x2.replace_lane 1
    unreachable
    )
  
  (func $16 (type $2)
    (param $0 f64)
    (param $1 i64)
    (local $2 i64)
    (local $3 f32)
    atomic.fence
    local.get $0
    i64.reinterpret_f64
    i64.clz
    i64.extend8_s
    i64.eqz
    i32.extend16_s
    i32.const 1993540479
    i32.extend16_s
    i8x16.splat
    i32x4.neg
    drop
    table.get $3
    global.get $8
    nop
    br 0
    )
  
  (data $13 
    "c\1c\e9\eb\a3\0d\f7X\04[\e4\e4\f1B\d7]\19\80!g5\03\86"))