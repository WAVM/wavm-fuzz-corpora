(module
  (type $check (func (param i32 i32) (result i32)))
  (type $block-sig-1 (func))
  (type $block-sig-2 (func (result i32)))
  (type $block-sig-3 (func (param i32)))
  (type $block-sig-4 (func (param i32 f64 i32) (result i32 f64 i32)))
  (type $0 (func (param i32) (result i32)))
  (type $1 (func (param i32) (result i32 i32)))
  (type $2 (func (param i32) (result i32 i32 i64)))
  (type $3 (func (param i64 i64 i32) (result i64 i32)))
  (type $4 (func (param i64 i64) (result i64)))
  (type $5 (func (result i32 i64 i32)))
  (type $6 (func (result i32 i32)))
  (type $7 (func (result f32 f32)))
  (type $8 (func (result i32 i32 i64)))
  (type $9 (func (param i32 i32) (result i32 i32)))
  (type $10 (func (param i64) (result i64)))
  (export "empty" (func $14))
  (export "singular" (func $15))
  (export "multi" (func $16))
  (export "nested" (func $17))
  (export "as-select-first" (func $18))
  (export "as-select-mid" (func $19))
  (export "as-selecta-m-break" (func $56))
  (export "params-break" (func $57))
  (export "params-id-break" (func $58))
  (export "effects" (func $59))
  (export "add64_u_with_carry" (func $add64_u_with_carry))
  (export "add64_u_saturated" (func $add64_u_saturated))
  (export "type-use" (func $60))
  (memory $12  1)
  (table $11  1 1 funcref)
  (global $a  (mut i32) (i32.const 10))
  (elem $13 (table $11) (i32.const 0)
    $func)
  
  (func $dummy (type $block-sig-1)
    )
  
  (func $14 (type $block-sig-3)
    (param $0 i32)
    local.get $0
    if $0
    end ;; $0
    local.get $0
    if $1
    else
    end ;; $1
    local.get $0
    if $l
    end ;; $l
    local.get $0
    if $l_0
    else
    end ;; $l_0
    )
  
  (func $15 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if
      nop
    end ;; $if
    local.get $0
    if $if_0
      nop
    else
      nop
    end ;; $if_0
    local.get $0
    if $_fi2 (result i32)
      i32.const 7
    else
      i32.const 8
    end ;; $if_1
    )
  
  (func $16 (type $1)
    (param $0 i32)
    (result i32 i32)
    local.get $0
    if $if
      call $dummy
      call $dummy
      call $dummy
    end ;; $if
    local.get $0
    if $if_0
    else
      call $dummy
      call $dummy
      call $dummy
    end ;; $if_0
    local.get $0
    if $if_1 (result i32)
      call $dummy
      call $dummy
      i32.const 8
      call $dummy
    else
      call $dummy
      call $dummy
      i32.const 9
      call $dummy
    end ;; $if_1
    local.get $0
    if $if_2 (result i32 i64 i32)	      call $dummy
      call $dummy
      i32.const 1
      call $dummy
      call $dummy
      call $dummy
      i64.const 2
      call $dummy
      call $dummy
      call $dummy
      i32.const 3
      call $dummy
    else
      call $dummy
      call $dummy
      i32.const -1
      call $dummy
      call $dummy
      call $dummy
      i64.const -2
      call $dummy
      call $dummy
      call $dummy
      i32.const -3
      call $dummy
    end ;; $if_2
    drop
    drop
    )
  
  (func $17 (type $check)
    (param $0 i32)
    (param $1 i32)
    (result i32)
         call $dummy
        i32.const 9
      else
        call $dummy
        i3if_5
    end ;; $if
    )
  
  (func $18 (type $0)
    (param $0 i32)
    (result i32)
    local.get $0
    if $if (result i32)
      call $dummy
      i32.const 1
    else
   call $dummy
      i32.const 0
    end ;; $if
    i32.const 2
    i32.const 3
    select
    )
  
  (func $19 (type $0)
    (param $0 i32)
    (result i32)
   i32.const 0
    end ;; $if
    if $if_0 (result i32)
      call $dummy
      i32.const 2
    else
      call $dummy
      i32.const 3
    end ;; $i   $block ;; default
    end ;; $block
    )
  
  (func $func (type $check)
    (param $0 i32)
    (param $1 i32)
    (result i32)
    local.get $0
    )
  
  (func $29 (type $0)
    (param $0 i32)
    (result i32)
    block $block (result i32)
      local.get $0
      if $if (result i32)
        call $dummy
        i32.const 1
      else
        call $dummy
        i32.const 0
      end ;; $if
      i32.const 4
      i32.const 0
      call_indirect $11 (type $check)
    end ;; $befault
      unreachable
    end ;; $if_7
    19
      i64.const -b
    end ;; $if
    )
  
  (func $55 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 1
    i32.const 2
    local.get $0
    if $if (param i32 i32) (result i32 i32)
    end ;; $if
    i32.add
    )
  
  (func $56 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 1
    local.get $0
    if $if (param i32) (result i32)
      i32.const 2
      i32.add
      br $if
    else
      i32.const -2
      i32.add
      br $if
    end ;; $if
    )
  
  (func $57 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 1
    i32.const 2
    local.get $0
    if $if (param i32 i32) (result i32)
      i32.add
      br $if
    else
      i32.sub
      br $if
    end ;; $if
    )
  
  (func $58 (type $0)
    (param $0 i32)
    (result i32)
    i32.const 1
    i32.const 2
    local.get $0
    if $if (param i32 i32) (result i32 i32)
      br $if
    end ;; $if
    i32.add
    )
  
  (func $59 (type $0)
    (param $0 i32)
    (result i32)
    (local $1 i32)
    block $block (result i32)
      i32.const 1
      local.set $1
      local.get $0
    end ;; $block
    if $if
      local.get $1
      i32.const 2
      i32.mul
      local.set $1
      local.get 1
      local.get $1
      i32.const 4
      i32.mul
      local.set $1
      br $if
      local.get $1
      i32.const 1000
      i32.mul
      local.set $1
    end ;; $if
    local.get $1
    )
  
  (func $add64_u_with_carry (type $3)
    (param $i i64)
    (param $j i64)
    (param $c i32)
    (result i64 i32)
    (local $k i64)
    local.get $i
    local.get $j
    i64.add
    local.get $c
    i64.extend_i32_u
    i64.add
    local.set $k
    local.get $k
    local.get $k
    local.get $i
    i64.lt_u
    return
    )
  
  (func $add64_u_saturated (type $4)
    (param $0 i64)
    (param $1 i64)
    (result i64)
    local.get $0
    local.get $1
    i32.const 0
    call $add64_u_with_carry
    if $if (param i64) (result i64)
      drop
      i64.const -1
    end ;; $if
    )
  
  (func $60 (type $block-sig-1)
    i32.const 1
    if $if
    end ;; $if
    i32.const 1
    if $if_0 (result i32)
      i32.const 0
    else
      i32.const 2
    end ;; $if_0
    i32.const 1
    if $if_1 (param i32)
      drop
    else
      drop
    end ;; $i¡_1
    i32.const 0
    f64.const 0x0.0000000000000p-1023
    i32.const 0
    i32.const 1
    if $if_2 (param i32 f64 i32) (result i32 f64 i32)
    end ;; $if_2
    drop
    drop
    drop
    i32.const 1
    if $if_3 (result i32)
      i32.const 0
    else
      i32.const 2
    end ;; $if_3
    i32.const 1
    if $if_4 (param i32)
      drop
    else
      drop
    end ;; $if_4
    i32.const 0
    f64.const 0x0.0000000000000p-1023
    i32.const 0
    i32.const 1
    if $if_5 (param i32 f64 i32) (result i32 f64 i32)
    end ;; $if_5
    drop
    drop
    drop
    ))