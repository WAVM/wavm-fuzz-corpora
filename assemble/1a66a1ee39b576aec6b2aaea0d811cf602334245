(module
  (type $0 (func))
  (memory $1  1)
  (export "i8x16.shl-in-block" (func $2))
  (export "i8x16.shr_s-in-block" (func $3))
  (export "i8x16.shr_u-in-block" (func $4))
  (export "i16x8.shl-in-block" (func $5))
  (export "i16x8.shr_s-in-block" (func $6))
  (export "i32x8.shr_u-in-block" (func $7))
  (export "i32x4.shl-in-block" (func $8))
  (export "i32x4.shr_s-in-block" (func $9))
  (export "i32x4.shr_u-in-block" (func $10))
  (export "i64x2.shl-in-block" (func $11))
  (export "i64x2.shr_s-in-block" (func $12))
  (export "i64x2.shr_u-in-block" (func $13))
  (export "nested-i8x16.shl" (func $14))
  (export "nested-i8x16.shr_s" (func $15))
  (export "nested-i8x16.shr_u" (func $16))
  (export "nested-i16x8.shl" (func $17))
  (export "nested-i16x8.shr_s" (func $18))
  (export "nested-i16x8.shr_u" (func $19))
  (export "nested-i32x4.shl" (func $20))
  (export "nested-i32x4.shr_s" (func $21))
  (export "nested-i32x4.shr_u" (func $22))
  (export "nested-i64x2.shl" (func $23))
  (export "nested-i64x2.shr_s" (func $24))
  (export "nested-i64x2.shr_u" (func $25))
  
  (func $2 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i8x16.shl
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $3 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i8x16.shr_s
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $4 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i8x16.shr_u
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $5 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i16x8.shl
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $6 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i16x8.shr_s
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $7 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i16x8.shr_u
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $8 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i32x4.shl
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $9 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i32x4.shr_s
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $10 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i32x4.shr_u
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $11 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i64x2.shl
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $12 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i64x2.shr_s
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $13 (type $0)
    block $block
      block $block_0 (result v128)
        block $block_1 (result v128)
          i32.const 0
          v128.load
        end ;; $block_1
        i32.const 1
        i64x2.shr_u
      end ;; $block_0
      drop
    end ;; $block
    )
  
  (func $14 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i8x16.shl
    i32.const 1
    i8x16.shl
    i32.const 1
    i8x16.shl
    drop
    )
  
  (func $15 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i8x16.shr_s
    i32.const 1
    i8x16.shr_s
    i32.const 1
    i8x16.shr_s
    drop
    )
  
  (func $16 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i8x16.shr_u
    i32.const 1
    i8x16.shr_u
    i32.const 1
    i8x16.shr_u
    drop
    )
  
  (func $17 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i16x8.shl
    i32.const 1
    i16x8.shl
    i32.const 1
    i16x8.shl
    drop
    )
  
  (func $18 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i16x8.shr_s
    i32.const 1
    i16x8.shr_s
    i32.const 1
    i16x8.shr_s
    drop
    )
  
  (func $19 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i16x8.shr_u
    i32.const 1
    i16x8.shr_u
    i32.const 1
    i16x8.shr_u
    drop
    )
  
  (func $20 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i32x4.shl
    i32.const 1
    i32x4.shl
    i32.const 1
    i32x4.shl
    drop
    )
  
  (func $21 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i32x4.shr_s
    i32.const 1
    i32x4.shr_s
    i32.const 1
    i32x4.shr_s
    drop
    )
  
  (func $22 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i32x4.shr_u
    i32.const 1
    i32x4.shr_u
    i32.const 1
    i32x4.shr_u
    drop
    )
  
  (func $23 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i64x2.shl
    i32.const 1
    i64x2.shl
    i32.const 1
    i64x2.shl
    drop
    )
  
  (func $24 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i64x2.shr_s
    i32.const 1
    i64x2.shr_s
    i32.const 1
    i64x2.shr_s
    drop
    )
  
  (func $25 (type $0)
    i32.const 0
    v128.load
    i32.const 1
    i64x2.shr_u
    i32.const 1
    i64x2.shr_u
    i32.const 1
    i64x2.shr_u
    drop
    ))